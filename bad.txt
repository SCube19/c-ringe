-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.8 from ParCringe.y
-----------------------------------------------------------------------------

state 123 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Ident -> L_ident                                   (1)
	Integer -> L_integ                                 (2)
	String -> L_quoted                                 (3)
	Program -> ListStmt                                (4)
	Block -> '{' ListStmt '}'                          (5)
	ListStmt ->                                        (6)
	ListStmt -> ListStmt Stmt                          (7)
	Stmt -> ';'                                        (8)
	Stmt -> Block                                      (9)
	Stmt -> Type Item ';'                              (10)
	Stmt -> 'immutable' Type Item ';'                  (11)
	Stmt -> Ident '=' Expr ';'                         (12)
	Stmt -> 'inc' Ident ';'                            (13)
	Stmt -> 'dec' Ident ';'                            (14)
	Stmt -> 'return' Expr ';'                          (15)
	Stmt -> 'return' ';'                               (16)
	Stmt -> 'if' '(' Expr ')' Stmt                     (17)
	Stmt -> 'if' '(' Expr ')' Stmt 'else' Stmt         (18)
	Stmt -> 'while' '(' Expr ')' Stmt                  (19)
	Stmt -> 'from' Ident '=' Expr 'to' Expr 'do' Stmt   (20)
	Stmt -> 'print' '(' Expr ')' ';'                   (21)
	Stmt -> 'exit' ';'                                 (22)
	Stmt -> 'skiploop' ';'                             (23)
	Stmt -> Expr ';'                                   (24)
	Item -> Ident                                      (25)
	Item -> Ident '=' Expr                             (26)
	Type -> 'int'                                      (27)
	Type -> 'char'                                     (28)
	Type -> 'string'                                   (29)
	Type -> 'bool'                                     (30)
	Type -> 'void'                                     (31)
	Type -> 'fun'                                      (32)
	Arg -> Type Ident                                  (33)
	Arg -> 'ref' Type Ident                            (34)
	ListArg ->                                         (35)
	ListArg -> Arg                                     (36)
	ListArg -> Arg ',' ListArg                         (37)
	Expr6 -> Ident                                     (38)
	Expr6 -> Integer                                   (39)
	Expr6 -> 'true'                                    (40)
	Expr6 -> 'false'                                   (41)
	Expr6 -> '(' ListArg ')' '->' Type ':' Block       (42)
	Expr6 -> Ident '(' ListExpr ')'                    (43)
	Expr6 -> String                                    (44)
	Expr6 -> '(' Expr ')'                              (45)
	Expr5 -> '-' Expr6                                 (46)
	Expr5 -> 'not' Expr6                               (47)
	Expr5 -> Expr6                                     (48)
	Expr4 -> Expr4 MulOp Expr5                         (49)
	Expr4 -> Expr5                                     (50)
	Expr3 -> Expr3 AddOp Expr4                         (51)
	Expr3 -> Expr4                                     (52)
	Expr2 -> Expr2 RelOp Expr3                         (53)
	Expr2 -> Expr3                                     (54)
	Expr1 -> Expr2 'and' Expr1                         (55)
	Expr1 -> Expr2                                     (56)
	Expr -> Expr1 'or' Expr                            (57)
	Expr -> Expr1                                      (58)
	ListExpr ->                                        (59)
	ListExpr -> Expr                                   (60)
	ListExpr -> Expr ',' ListExpr                      (61)
	AddOp -> '+'                                       (62)
	AddOp -> '-'                                       (63)
	MulOp -> '*'                                       (64)
	MulOp -> '/'                                       (65)
	MulOp -> 'mod'                                     (66)
	RelOp -> '<'                                       (67)
	RelOp -> '<='                                      (68)
	RelOp -> '>'                                       (69)
	RelOp -> '>='                                      (70)
	RelOp -> 'is'                                      (71)
	RelOp -> 'is not'                                  (72)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'+'            { PT _ (TS _ 4) }
	','            { PT _ (TS _ 5) }
	'-'            { PT _ (TS _ 6) }
	'->'           { PT _ (TS _ 7) }
	'/'            { PT _ (TS _ 8) }
	':'            { PT _ (TS _ 9) }
	';'            { PT _ (TS _ 10) }
	'<'            { PT _ (TS _ 11) }
	'<='           { PT _ (TS _ 12) }
	'='            { PT _ (TS _ 13) }
	'>'            { PT _ (TS _ 14) }
	'>='           { PT _ (TS _ 15) }
	'and'          { PT _ (TS _ 16) }
	'bool'         { PT _ (TS _ 17) }
	'char'         { PT _ (TS _ 18) }
	'dec'          { PT _ (TS _ 19) }
	'do'           { PT _ (TS _ 20) }
	'else'         { PT _ (TS _ 21) }
	'exit'         { PT _ (TS _ 22) }
	'false'        { PT _ (TS _ 23) }
	'from'         { PT _ (TS _ 24) }
	'fun'          { PT _ (TS _ 25) }
	'if'           { PT _ (TS _ 26) }
	'immutable'    { PT _ (TS _ 27) }
	'inc'          { PT _ (TS _ 28) }
	'int'          { PT _ (TS _ 29) }
	'is'           { PT _ (TS _ 30) }
	'is not'       { PT _ (TS _ 31) }
	'mod'          { PT _ (TS _ 32) }
	'not'          { PT _ (TS _ 33) }
	'or'           { PT _ (TS _ 34) }
	'print'        { PT _ (TS _ 35) }
	'ref'          { PT _ (TS _ 36) }
	'return'       { PT _ (TS _ 37) }
	'skiploop'     { PT _ (TS _ 38) }
	'string'       { PT _ (TS _ 39) }
	'to'           { PT _ (TS _ 40) }
	'true'         { PT _ (TS _ 41) }
	'void'         { PT _ (TS _ 42) }
	'while'        { PT _ (TS _ 43) }
	'{'            { PT _ (TS _ 44) }
	'}'            { PT _ (TS _ 45) }
	L_ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }
	L_quoted       { PT _ (TL $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Ident           rule  1
	Integer         rule  2
	String          rule  3
	Program         rule  4
	Block           rule  5
	ListStmt        rules 6, 7
	Stmt            rules 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24
	Item            rules 25, 26
	Type            rules 27, 28, 29, 30, 31, 32
	Arg             rules 33, 34
	ListArg         rules 35, 36, 37
	Expr6           rules 38, 39, 40, 41, 42, 43, 44, 45
	Expr5           rules 46, 47, 48
	Expr4           rules 49, 50
	Expr3           rules 51, 52
	Expr2           rules 53, 54
	Expr1           rules 55, 56
	Expr            rules 57, 58
	ListExpr        rules 59, 60, 61
	AddOp           rules 62, 63
	MulOp           rules 64, 65, 66
	RelOp           rules 67, 68, 69, 70, 71, 72

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            reduce using rule 6
	'-'            reduce using rule 6
	';'            reduce using rule 6
	'bool'         reduce using rule 6
	'char'         reduce using rule 6
	'dec'          reduce using rule 6
	'exit'         reduce using rule 6
	'false'        reduce using rule 6
	'from'         reduce using rule 6
	'fun'          reduce using rule 6
	'if'           reduce using rule 6
	'immutable'    reduce using rule 6
	'inc'          reduce using rule 6
	'int'          reduce using rule 6
	'not'          reduce using rule 6
	'print'        reduce using rule 6
	'return'       reduce using rule 6
	'skiploop'     reduce using rule 6
	'string'       reduce using rule 6
	'true'         reduce using rule 6
	'void'         reduce using rule 6
	'while'        reduce using rule 6
	'{'            reduce using rule 6
	L_ident        reduce using rule 6
	L_integ        reduce using rule 6
	L_quoted       reduce using rule 6
	%eof           reduce using rule 6

	Program        goto state 3
	ListStmt       goto state 4

State 1


	L_ident        shift, and enter state 2


State 2

	Ident -> L_ident .                                  (rule 1)

	'('            reduce using rule 1
	')'            reduce using rule 1
	'*'            reduce using rule 1
	'+'            reduce using rule 1
	','            reduce using rule 1
	'-'            reduce using rule 1
	'/'            reduce using rule 1
	';'            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'='            reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'and'          reduce using rule 1
	'do'           reduce using rule 1
	'is'           reduce using rule 1
	'is not'       reduce using rule 1
	'mod'          reduce using rule 1
	'or'           reduce using rule 1
	'to'           reduce using rule 1


State 3

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 4

	Program -> ListStmt .                               (rule 4)
	ListStmt -> ListStmt . Stmt                         (rule 7)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	';'            shift, and enter state 20
	'bool'         shift, and enter state 21
	'char'         shift, and enter state 22
	'dec'          shift, and enter state 23
	'exit'         shift, and enter state 24
	'false'        shift, and enter state 25
	'from'         shift, and enter state 26
	'fun'          shift, and enter state 27
	'if'           shift, and enter state 28
	'immutable'    shift, and enter state 29
	'inc'          shift, and enter state 30
	'int'          shift, and enter state 31
	'not'          shift, and enter state 32
	'print'        shift, and enter state 33
	'return'       shift, and enter state 34
	'skiploop'     shift, and enter state 35
	'string'       shift, and enter state 36
	'true'         shift, and enter state 37
	'void'         shift, and enter state 38
	'while'        shift, and enter state 39
	'{'            shift, and enter state 40
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42
	%eof           reduce using rule 4

	Ident          goto state 5
	Integer        goto state 6
	String         goto state 7
	Block          goto state 8
	Stmt           goto state 9
	Type           goto state 10
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 17

State 5

	Stmt -> Ident . '=' Expr ';'                        (rule 12)
	Expr6 -> Ident .                                    (rule 38)
	Expr6 -> Ident . '(' ListExpr ')'                   (rule 43)

	'('            shift, and enter state 82
	'*'            reduce using rule 38
	'+'            reduce using rule 38
	'-'            reduce using rule 38
	'/'            reduce using rule 38
	';'            reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'='            shift, and enter state 83
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	'and'          reduce using rule 38
	'is'           reduce using rule 38
	'is not'       reduce using rule 38
	'mod'          reduce using rule 38
	'or'           reduce using rule 38


State 6

	Expr6 -> Integer .                                  (rule 39)

	')'            reduce using rule 39
	'*'            reduce using rule 39
	'+'            reduce using rule 39
	','            reduce using rule 39
	'-'            reduce using rule 39
	'/'            reduce using rule 39
	';'            reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'>'            reduce using rule 39
	'>='           reduce using rule 39
	'and'          reduce using rule 39
	'do'           reduce using rule 39
	'is'           reduce using rule 39
	'is not'       reduce using rule 39
	'mod'          reduce using rule 39
	'or'           reduce using rule 39
	'to'           reduce using rule 39


State 7

	Expr6 -> String .                                   (rule 44)

	')'            reduce using rule 44
	'*'            reduce using rule 44
	'+'            reduce using rule 44
	','            reduce using rule 44
	'-'            reduce using rule 44
	'/'            reduce using rule 44
	';'            reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'>'            reduce using rule 44
	'>='           reduce using rule 44
	'and'          reduce using rule 44
	'do'           reduce using rule 44
	'is'           reduce using rule 44
	'is not'       reduce using rule 44
	'mod'          reduce using rule 44
	'or'           reduce using rule 44
	'to'           reduce using rule 44


State 8

	Stmt -> Block .                                     (rule 9)

	'('            reduce using rule 9
	'-'            reduce using rule 9
	';'            reduce using rule 9
	'bool'         reduce using rule 9
	'char'         reduce using rule 9
	'dec'          reduce using rule 9
	'else'         reduce using rule 9
	'exit'         reduce using rule 9
	'false'        reduce using rule 9
	'from'         reduce using rule 9
	'fun'          reduce using rule 9
	'if'           reduce using rule 9
	'immutable'    reduce using rule 9
	'inc'          reduce using rule 9
	'int'          reduce using rule 9
	'not'          reduce using rule 9
	'print'        reduce using rule 9
	'return'       reduce using rule 9
	'skiploop'     reduce using rule 9
	'string'       reduce using rule 9
	'true'         reduce using rule 9
	'void'         reduce using rule 9
	'while'        reduce using rule 9
	'{'            reduce using rule 9
	'}'            reduce using rule 9
	L_ident        reduce using rule 9
	L_integ        reduce using rule 9
	L_quoted       reduce using rule 9
	%eof           reduce using rule 9


State 9

	ListStmt -> ListStmt Stmt .                         (rule 7)

	'('            reduce using rule 7
	'-'            reduce using rule 7
	';'            reduce using rule 7
	'bool'         reduce using rule 7
	'char'         reduce using rule 7
	'dec'          reduce using rule 7
	'exit'         reduce using rule 7
	'false'        reduce using rule 7
	'from'         reduce using rule 7
	'fun'          reduce using rule 7
	'if'           reduce using rule 7
	'immutable'    reduce using rule 7
	'inc'          reduce using rule 7
	'int'          reduce using rule 7
	'not'          reduce using rule 7
	'print'        reduce using rule 7
	'return'       reduce using rule 7
	'skiploop'     reduce using rule 7
	'string'       reduce using rule 7
	'true'         reduce using rule 7
	'void'         reduce using rule 7
	'while'        reduce using rule 7
	'{'            reduce using rule 7
	'}'            reduce using rule 7
	L_ident        reduce using rule 7
	L_integ        reduce using rule 7
	L_quoted       reduce using rule 7
	%eof           reduce using rule 7


State 10

	Stmt -> Type . Item ';'                             (rule 10)

	L_ident        shift, and enter state 2

	Ident          goto state 80
	Item           goto state 81

State 11

	Expr5 -> Expr6 .                                    (rule 48)

	')'            reduce using rule 48
	'*'            reduce using rule 48
	'+'            reduce using rule 48
	','            reduce using rule 48
	'-'            reduce using rule 48
	'/'            reduce using rule 48
	';'            reduce using rule 48
	'<'            reduce using rule 48
	'<='           reduce using rule 48
	'>'            reduce using rule 48
	'>='           reduce using rule 48
	'and'          reduce using rule 48
	'do'           reduce using rule 48
	'is'           reduce using rule 48
	'is not'       reduce using rule 48
	'mod'          reduce using rule 48
	'or'           reduce using rule 48
	'to'           reduce using rule 48


State 12

	Expr4 -> Expr5 .                                    (rule 50)

	')'            reduce using rule 50
	'*'            reduce using rule 50
	'+'            reduce using rule 50
	','            reduce using rule 50
	'-'            reduce using rule 50
	'/'            reduce using rule 50
	';'            reduce using rule 50
	'<'            reduce using rule 50
	'<='           reduce using rule 50
	'>'            reduce using rule 50
	'>='           reduce using rule 50
	'and'          reduce using rule 50
	'do'           reduce using rule 50
	'is'           reduce using rule 50
	'is not'       reduce using rule 50
	'mod'          reduce using rule 50
	'or'           reduce using rule 50
	'to'           reduce using rule 50


State 13

	Expr4 -> Expr4 . MulOp Expr5                        (rule 49)
	Expr3 -> Expr4 .                                    (rule 52)

	')'            reduce using rule 52
	'*'            shift, and enter state 77
	'+'            reduce using rule 52
	','            reduce using rule 52
	'-'            reduce using rule 52
	'/'            shift, and enter state 78
	';'            reduce using rule 52
	'<'            reduce using rule 52
	'<='           reduce using rule 52
	'>'            reduce using rule 52
	'>='           reduce using rule 52
	'and'          reduce using rule 52
	'do'           reduce using rule 52
	'is'           reduce using rule 52
	'is not'       reduce using rule 52
	'mod'          shift, and enter state 79
	'or'           reduce using rule 52
	'to'           reduce using rule 52

	MulOp          goto state 76

State 14

	Expr3 -> Expr3 . AddOp Expr4                        (rule 51)
	Expr2 -> Expr3 .                                    (rule 54)

	')'            reduce using rule 54
	'+'            shift, and enter state 74
	','            reduce using rule 54
	'-'            shift, and enter state 75
	';'            reduce using rule 54
	'<'            reduce using rule 54
	'<='           reduce using rule 54
	'>'            reduce using rule 54
	'>='           reduce using rule 54
	'and'          reduce using rule 54
	'do'           reduce using rule 54
	'is'           reduce using rule 54
	'is not'       reduce using rule 54
	'or'           reduce using rule 54
	'to'           reduce using rule 54

	AddOp          goto state 73

State 15

	Expr2 -> Expr2 . RelOp Expr3                        (rule 53)
	Expr1 -> Expr2 . 'and' Expr1                        (rule 55)
	Expr1 -> Expr2 .                                    (rule 56)

	')'            reduce using rule 56
	','            reduce using rule 56
	';'            reduce using rule 56
	'<'            shift, and enter state 66
	'<='           shift, and enter state 67
	'>'            shift, and enter state 68
	'>='           shift, and enter state 69
	'and'          shift, and enter state 70
	'do'           reduce using rule 56
	'is'           shift, and enter state 71
	'is not'       shift, and enter state 72
	'or'           reduce using rule 56
	'to'           reduce using rule 56

	RelOp          goto state 65

State 16

	Expr -> Expr1 . 'or' Expr                           (rule 57)
	Expr -> Expr1 .                                     (rule 58)

	')'            reduce using rule 58
	','            reduce using rule 58
	';'            reduce using rule 58
	'do'           reduce using rule 58
	'or'           shift, and enter state 64
	'to'           reduce using rule 58


State 17

	Stmt -> Expr . ';'                                  (rule 24)

	';'            shift, and enter state 63


State 18

	Expr6 -> '(' . ListArg ')' '->' Type ':' Block      (rule 42)
	Expr6 -> '(' . Expr ')'                             (rule 45)

	'('            shift, and enter state 18
	')'            reduce using rule 35
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 21
	'char'         shift, and enter state 22
	'false'        shift, and enter state 25
	'fun'          shift, and enter state 27
	'int'          shift, and enter state 31
	'not'          shift, and enter state 32
	'ref'          shift, and enter state 62
	'string'       shift, and enter state 36
	'true'         shift, and enter state 37
	'void'         shift, and enter state 38
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Type           goto state 58
	Arg            goto state 59
	ListArg        goto state 60
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 61

State 19

	Expr5 -> '-' . Expr6                                (rule 46)

	'('            shift, and enter state 18
	'false'        shift, and enter state 25
	'true'         shift, and enter state 37
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Expr6          goto state 57

State 20

	Stmt -> ';' .                                       (rule 8)

	'('            reduce using rule 8
	'-'            reduce using rule 8
	';'            reduce using rule 8
	'bool'         reduce using rule 8
	'char'         reduce using rule 8
	'dec'          reduce using rule 8
	'else'         reduce using rule 8
	'exit'         reduce using rule 8
	'false'        reduce using rule 8
	'from'         reduce using rule 8
	'fun'          reduce using rule 8
	'if'           reduce using rule 8
	'immutable'    reduce using rule 8
	'inc'          reduce using rule 8
	'int'          reduce using rule 8
	'not'          reduce using rule 8
	'print'        reduce using rule 8
	'return'       reduce using rule 8
	'skiploop'     reduce using rule 8
	'string'       reduce using rule 8
	'true'         reduce using rule 8
	'void'         reduce using rule 8
	'while'        reduce using rule 8
	'{'            reduce using rule 8
	'}'            reduce using rule 8
	L_ident        reduce using rule 8
	L_integ        reduce using rule 8
	L_quoted       reduce using rule 8
	%eof           reduce using rule 8


State 21

	Type -> 'bool' .                                    (rule 30)

	':'            reduce using rule 30
	L_ident        reduce using rule 30


State 22

	Type -> 'char' .                                    (rule 28)

	':'            reduce using rule 28
	L_ident        reduce using rule 28


State 23

	Stmt -> 'dec' . Ident ';'                           (rule 14)

	L_ident        shift, and enter state 2

	Ident          goto state 56

State 24

	Stmt -> 'exit' . ';'                                (rule 22)

	';'            shift, and enter state 55


State 25

	Expr6 -> 'false' .                                  (rule 41)

	')'            reduce using rule 41
	'*'            reduce using rule 41
	'+'            reduce using rule 41
	','            reduce using rule 41
	'-'            reduce using rule 41
	'/'            reduce using rule 41
	';'            reduce using rule 41
	'<'            reduce using rule 41
	'<='           reduce using rule 41
	'>'            reduce using rule 41
	'>='           reduce using rule 41
	'and'          reduce using rule 41
	'do'           reduce using rule 41
	'is'           reduce using rule 41
	'is not'       reduce using rule 41
	'mod'          reduce using rule 41
	'or'           reduce using rule 41
	'to'           reduce using rule 41


State 26

	Stmt -> 'from' . Ident '=' Expr 'to' Expr 'do' Stmt    (rule 20)

	L_ident        shift, and enter state 2

	Ident          goto state 54

State 27

	Type -> 'fun' .                                     (rule 32)

	':'            reduce using rule 32
	L_ident        reduce using rule 32


State 28

	Stmt -> 'if' . '(' Expr ')' Stmt                    (rule 17)
	Stmt -> 'if' . '(' Expr ')' Stmt 'else' Stmt        (rule 18)

	'('            shift, and enter state 53


State 29

	Stmt -> 'immutable' . Type Item ';'                 (rule 11)

	'bool'         shift, and enter state 21
	'char'         shift, and enter state 22
	'fun'          shift, and enter state 27
	'int'          shift, and enter state 31
	'string'       shift, and enter state 36
	'void'         shift, and enter state 38

	Type           goto state 52

State 30

	Stmt -> 'inc' . Ident ';'                           (rule 13)

	L_ident        shift, and enter state 2

	Ident          goto state 51

State 31

	Type -> 'int' .                                     (rule 27)

	':'            reduce using rule 27
	L_ident        reduce using rule 27


State 32

	Expr5 -> 'not' . Expr6                              (rule 47)

	'('            shift, and enter state 18
	'false'        shift, and enter state 25
	'true'         shift, and enter state 37
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Expr6          goto state 50

State 33

	Stmt -> 'print' . '(' Expr ')' ';'                  (rule 21)

	'('            shift, and enter state 49


State 34

	Stmt -> 'return' . Expr ';'                         (rule 15)
	Stmt -> 'return' . ';'                              (rule 16)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	';'            shift, and enter state 48
	'false'        shift, and enter state 25
	'not'          shift, and enter state 32
	'true'         shift, and enter state 37
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 47

State 35

	Stmt -> 'skiploop' . ';'                            (rule 23)

	';'            shift, and enter state 45


State 36

	Type -> 'string' .                                  (rule 29)

	':'            reduce using rule 29
	L_ident        reduce using rule 29


State 37

	Expr6 -> 'true' .                                   (rule 40)

	')'            reduce using rule 40
	'*'            reduce using rule 40
	'+'            reduce using rule 40
	','            reduce using rule 40
	'-'            reduce using rule 40
	'/'            reduce using rule 40
	';'            reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'>'            reduce using rule 40
	'>='           reduce using rule 40
	'and'          reduce using rule 40
	'do'           reduce using rule 40
	'is'           reduce using rule 40
	'is not'       reduce using rule 40
	'mod'          reduce using rule 40
	'or'           reduce using rule 40
	'to'           reduce using rule 40


State 38

	Type -> 'void' .                                    (rule 31)

	':'            reduce using rule 31
	L_ident        reduce using rule 31


State 39

	Stmt -> 'while' . '(' Expr ')' Stmt                 (rule 19)

	'('            shift, and enter state 44


State 40

	Block -> '{' . ListStmt '}'                         (rule 5)

	'('            reduce using rule 6
	'-'            reduce using rule 6
	';'            reduce using rule 6
	'bool'         reduce using rule 6
	'char'         reduce using rule 6
	'dec'          reduce using rule 6
	'exit'         reduce using rule 6
	'false'        reduce using rule 6
	'from'         reduce using rule 6
	'fun'          reduce using rule 6
	'if'           reduce using rule 6
	'immutable'    reduce using rule 6
	'inc'          reduce using rule 6
	'int'          reduce using rule 6
	'not'          reduce using rule 6
	'print'        reduce using rule 6
	'return'       reduce using rule 6
	'skiploop'     reduce using rule 6
	'string'       reduce using rule 6
	'true'         reduce using rule 6
	'void'         reduce using rule 6
	'while'        reduce using rule 6
	'{'            reduce using rule 6
	'}'            reduce using rule 6
	L_ident        reduce using rule 6
	L_integ        reduce using rule 6
	L_quoted       reduce using rule 6

	ListStmt       goto state 43

State 41

	Integer -> L_integ .                                (rule 2)

	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'/'            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'and'          reduce using rule 2
	'do'           reduce using rule 2
	'is'           reduce using rule 2
	'is not'       reduce using rule 2
	'mod'          reduce using rule 2
	'or'           reduce using rule 2
	'to'           reduce using rule 2


State 42

	String -> L_quoted .                                (rule 3)

	')'            reduce using rule 3
	'*'            reduce using rule 3
	'+'            reduce using rule 3
	','            reduce using rule 3
	'-'            reduce using rule 3
	'/'            reduce using rule 3
	';'            reduce using rule 3
	'<'            reduce using rule 3
	'<='           reduce using rule 3
	'>'            reduce using rule 3
	'>='           reduce using rule 3
	'and'          reduce using rule 3
	'do'           reduce using rule 3
	'is'           reduce using rule 3
	'is not'       reduce using rule 3
	'mod'          reduce using rule 3
	'or'           reduce using rule 3
	'to'           reduce using rule 3


State 43

	Block -> '{' ListStmt . '}'                         (rule 5)
	ListStmt -> ListStmt . Stmt                         (rule 7)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	';'            shift, and enter state 20
	'bool'         shift, and enter state 21
	'char'         shift, and enter state 22
	'dec'          shift, and enter state 23
	'exit'         shift, and enter state 24
	'false'        shift, and enter state 25
	'from'         shift, and enter state 26
	'fun'          shift, and enter state 27
	'if'           shift, and enter state 28
	'immutable'    shift, and enter state 29
	'inc'          shift, and enter state 30
	'int'          shift, and enter state 31
	'not'          shift, and enter state 32
	'print'        shift, and enter state 33
	'return'       shift, and enter state 34
	'skiploop'     shift, and enter state 35
	'string'       shift, and enter state 36
	'true'         shift, and enter state 37
	'void'         shift, and enter state 38
	'while'        shift, and enter state 39
	'{'            shift, and enter state 40
	'}'            shift, and enter state 107
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 5
	Integer        goto state 6
	String         goto state 7
	Block          goto state 8
	Stmt           goto state 9
	Type           goto state 10
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 17

State 44

	Stmt -> 'while' '(' . Expr ')' Stmt                 (rule 19)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'false'        shift, and enter state 25
	'not'          shift, and enter state 32
	'true'         shift, and enter state 37
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 106

State 45

	Stmt -> 'skiploop' ';' .                            (rule 23)

	'('            reduce using rule 23
	'-'            reduce using rule 23
	';'            reduce using rule 23
	'bool'         reduce using rule 23
	'char'         reduce using rule 23
	'dec'          reduce using rule 23
	'else'         reduce using rule 23
	'exit'         reduce using rule 23
	'false'        reduce using rule 23
	'from'         reduce using rule 23
	'fun'          reduce using rule 23
	'if'           reduce using rule 23
	'immutable'    reduce using rule 23
	'inc'          reduce using rule 23
	'int'          reduce using rule 23
	'not'          reduce using rule 23
	'print'        reduce using rule 23
	'return'       reduce using rule 23
	'skiploop'     reduce using rule 23
	'string'       reduce using rule 23
	'true'         reduce using rule 23
	'void'         reduce using rule 23
	'while'        reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	L_ident        reduce using rule 23
	L_integ        reduce using rule 23
	L_quoted       reduce using rule 23
	%eof           reduce using rule 23


State 46

	Expr6 -> Ident .                                    (rule 38)
	Expr6 -> Ident . '(' ListExpr ')'                   (rule 43)

	'('            shift, and enter state 82
	')'            reduce using rule 38
	'*'            reduce using rule 38
	'+'            reduce using rule 38
	','            reduce using rule 38
	'-'            reduce using rule 38
	'/'            reduce using rule 38
	';'            reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	'and'          reduce using rule 38
	'do'           reduce using rule 38
	'is'           reduce using rule 38
	'is not'       reduce using rule 38
	'mod'          reduce using rule 38
	'or'           reduce using rule 38
	'to'           reduce using rule 38


State 47

	Stmt -> 'return' Expr . ';'                         (rule 15)

	';'            shift, and enter state 105


State 48

	Stmt -> 'return' ';' .                              (rule 16)

	'('            reduce using rule 16
	'-'            reduce using rule 16
	';'            reduce using rule 16
	'bool'         reduce using rule 16
	'char'         reduce using rule 16
	'dec'          reduce using rule 16
	'else'         reduce using rule 16
	'exit'         reduce using rule 16
	'false'        reduce using rule 16
	'from'         reduce using rule 16
	'fun'          reduce using rule 16
	'if'           reduce using rule 16
	'immutable'    reduce using rule 16
	'inc'          reduce using rule 16
	'int'          reduce using rule 16
	'not'          reduce using rule 16
	'print'        reduce using rule 16
	'return'       reduce using rule 16
	'skiploop'     reduce using rule 16
	'string'       reduce using rule 16
	'true'         reduce using rule 16
	'void'         reduce using rule 16
	'while'        reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	L_ident        reduce using rule 16
	L_integ        reduce using rule 16
	L_quoted       reduce using rule 16
	%eof           reduce using rule 16


State 49

	Stmt -> 'print' '(' . Expr ')' ';'                  (rule 21)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'false'        shift, and enter state 25
	'not'          shift, and enter state 32
	'true'         shift, and enter state 37
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 104

State 50

	Expr5 -> 'not' Expr6 .                              (rule 47)

	')'            reduce using rule 47
	'*'            reduce using rule 47
	'+'            reduce using rule 47
	','            reduce using rule 47
	'-'            reduce using rule 47
	'/'            reduce using rule 47
	';'            reduce using rule 47
	'<'            reduce using rule 47
	'<='           reduce using rule 47
	'>'            reduce using rule 47
	'>='           reduce using rule 47
	'and'          reduce using rule 47
	'do'           reduce using rule 47
	'is'           reduce using rule 47
	'is not'       reduce using rule 47
	'mod'          reduce using rule 47
	'or'           reduce using rule 47
	'to'           reduce using rule 47


State 51

	Stmt -> 'inc' Ident . ';'                           (rule 13)

	';'            shift, and enter state 103


State 52

	Stmt -> 'immutable' Type . Item ';'                 (rule 11)

	L_ident        shift, and enter state 2

	Ident          goto state 80
	Item           goto state 102

State 53

	Stmt -> 'if' '(' . Expr ')' Stmt                    (rule 17)
	Stmt -> 'if' '(' . Expr ')' Stmt 'else' Stmt        (rule 18)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'false'        shift, and enter state 25
	'not'          shift, and enter state 32
	'true'         shift, and enter state 37
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 101

State 54

	Stmt -> 'from' Ident . '=' Expr 'to' Expr 'do' Stmt    (rule 20)

	'='            shift, and enter state 100


State 55

	Stmt -> 'exit' ';' .                                (rule 22)

	'('            reduce using rule 22
	'-'            reduce using rule 22
	';'            reduce using rule 22
	'bool'         reduce using rule 22
	'char'         reduce using rule 22
	'dec'          reduce using rule 22
	'else'         reduce using rule 22
	'exit'         reduce using rule 22
	'false'        reduce using rule 22
	'from'         reduce using rule 22
	'fun'          reduce using rule 22
	'if'           reduce using rule 22
	'immutable'    reduce using rule 22
	'inc'          reduce using rule 22
	'int'          reduce using rule 22
	'not'          reduce using rule 22
	'print'        reduce using rule 22
	'return'       reduce using rule 22
	'skiploop'     reduce using rule 22
	'string'       reduce using rule 22
	'true'         reduce using rule 22
	'void'         reduce using rule 22
	'while'        reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	L_ident        reduce using rule 22
	L_integ        reduce using rule 22
	L_quoted       reduce using rule 22
	%eof           reduce using rule 22


State 56

	Stmt -> 'dec' Ident . ';'                           (rule 14)

	';'            shift, and enter state 99


State 57

	Expr5 -> '-' Expr6 .                                (rule 46)

	')'            reduce using rule 46
	'*'            reduce using rule 46
	'+'            reduce using rule 46
	','            reduce using rule 46
	'-'            reduce using rule 46
	'/'            reduce using rule 46
	';'            reduce using rule 46
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'>'            reduce using rule 46
	'>='           reduce using rule 46
	'and'          reduce using rule 46
	'do'           reduce using rule 46
	'is'           reduce using rule 46
	'is not'       reduce using rule 46
	'mod'          reduce using rule 46
	'or'           reduce using rule 46
	'to'           reduce using rule 46


State 58

	Arg -> Type . Ident                                 (rule 33)

	L_ident        shift, and enter state 2

	Ident          goto state 98

State 59

	ListArg -> Arg .                                    (rule 36)
	ListArg -> Arg . ',' ListArg                        (rule 37)

	')'            reduce using rule 36
	','            shift, and enter state 97


State 60

	Expr6 -> '(' ListArg . ')' '->' Type ':' Block      (rule 42)

	')'            shift, and enter state 96


State 61

	Expr6 -> '(' Expr . ')'                             (rule 45)

	')'            shift, and enter state 95


State 62

	Arg -> 'ref' . Type Ident                           (rule 34)

	'bool'         shift, and enter state 21
	'char'         shift, and enter state 22
	'fun'          shift, and enter state 27
	'int'          shift, and enter state 31
	'string'       shift, and enter state 36
	'void'         shift, and enter state 38

	Type           goto state 94

State 63

	Stmt -> Expr ';' .                                  (rule 24)

	'('            reduce using rule 24
	'-'            reduce using rule 24
	';'            reduce using rule 24
	'bool'         reduce using rule 24
	'char'         reduce using rule 24
	'dec'          reduce using rule 24
	'else'         reduce using rule 24
	'exit'         reduce using rule 24
	'false'        reduce using rule 24
	'from'         reduce using rule 24
	'fun'          reduce using rule 24
	'if'           reduce using rule 24
	'immutable'    reduce using rule 24
	'inc'          reduce using rule 24
	'int'          reduce using rule 24
	'not'          reduce using rule 24
	'print'        reduce using rule 24
	'return'       reduce using rule 24
	'skiploop'     reduce using rule 24
	'string'       reduce using rule 24
	'true'         reduce using rule 24
	'void'         reduce using rule 24
	'while'        reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	L_ident        reduce using rule 24
	L_integ        reduce using rule 24
	L_quoted       reduce using rule 24
	%eof           reduce using rule 24


State 64

	Expr -> Expr1 'or' . Expr                           (rule 57)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'false'        shift, and enter state 25
	'not'          shift, and enter state 32
	'true'         shift, and enter state 37
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 93

State 65

	Expr2 -> Expr2 RelOp . Expr3                        (rule 53)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'false'        shift, and enter state 25
	'not'          shift, and enter state 32
	'true'         shift, and enter state 37
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 92

State 66

	RelOp -> '<' .                                      (rule 67)

	'('            reduce using rule 67
	'-'            reduce using rule 67
	'false'        reduce using rule 67
	'not'          reduce using rule 67
	'true'         reduce using rule 67
	L_ident        reduce using rule 67
	L_integ        reduce using rule 67
	L_quoted       reduce using rule 67


State 67

	RelOp -> '<=' .                                     (rule 68)

	'('            reduce using rule 68
	'-'            reduce using rule 68
	'false'        reduce using rule 68
	'not'          reduce using rule 68
	'true'         reduce using rule 68
	L_ident        reduce using rule 68
	L_integ        reduce using rule 68
	L_quoted       reduce using rule 68


State 68

	RelOp -> '>' .                                      (rule 69)

	'('            reduce using rule 69
	'-'            reduce using rule 69
	'false'        reduce using rule 69
	'not'          reduce using rule 69
	'true'         reduce using rule 69
	L_ident        reduce using rule 69
	L_integ        reduce using rule 69
	L_quoted       reduce using rule 69


State 69

	RelOp -> '>=' .                                     (rule 70)

	'('            reduce using rule 70
	'-'            reduce using rule 70
	'false'        reduce using rule 70
	'not'          reduce using rule 70
	'true'         reduce using rule 70
	L_ident        reduce using rule 70
	L_integ        reduce using rule 70
	L_quoted       reduce using rule 70


State 70

	Expr1 -> Expr2 'and' . Expr1                        (rule 55)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'false'        shift, and enter state 25
	'not'          shift, and enter state 32
	'true'         shift, and enter state 37
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 91

State 71

	RelOp -> 'is' .                                     (rule 71)

	'('            reduce using rule 71
	'-'            reduce using rule 71
	'false'        reduce using rule 71
	'not'          reduce using rule 71
	'true'         reduce using rule 71
	L_ident        reduce using rule 71
	L_integ        reduce using rule 71
	L_quoted       reduce using rule 71


State 72

	RelOp -> 'is not' .                                 (rule 72)

	'('            reduce using rule 72
	'-'            reduce using rule 72
	'false'        reduce using rule 72
	'not'          reduce using rule 72
	'true'         reduce using rule 72
	L_ident        reduce using rule 72
	L_integ        reduce using rule 72
	L_quoted       reduce using rule 72


State 73

	Expr3 -> Expr3 AddOp . Expr4                        (rule 51)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'false'        shift, and enter state 25
	'not'          shift, and enter state 32
	'true'         shift, and enter state 37
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 90

State 74

	AddOp -> '+' .                                      (rule 62)

	'('            reduce using rule 62
	'-'            reduce using rule 62
	'false'        reduce using rule 62
	'not'          reduce using rule 62
	'true'         reduce using rule 62
	L_ident        reduce using rule 62
	L_integ        reduce using rule 62
	L_quoted       reduce using rule 62


State 75

	AddOp -> '-' .                                      (rule 63)

	'('            reduce using rule 63
	'-'            reduce using rule 63
	'false'        reduce using rule 63
	'not'          reduce using rule 63
	'true'         reduce using rule 63
	L_ident        reduce using rule 63
	L_integ        reduce using rule 63
	L_quoted       reduce using rule 63


State 76

	Expr4 -> Expr4 MulOp . Expr5                        (rule 49)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'false'        shift, and enter state 25
	'not'          shift, and enter state 32
	'true'         shift, and enter state 37
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Expr6          goto state 11
	Expr5          goto state 89

State 77

	MulOp -> '*' .                                      (rule 64)

	'('            reduce using rule 64
	'-'            reduce using rule 64
	'false'        reduce using rule 64
	'not'          reduce using rule 64
	'true'         reduce using rule 64
	L_ident        reduce using rule 64
	L_integ        reduce using rule 64
	L_quoted       reduce using rule 64


State 78

	MulOp -> '/' .                                      (rule 65)

	'('            reduce using rule 65
	'-'            reduce using rule 65
	'false'        reduce using rule 65
	'not'          reduce using rule 65
	'true'         reduce using rule 65
	L_ident        reduce using rule 65
	L_integ        reduce using rule 65
	L_quoted       reduce using rule 65


State 79

	MulOp -> 'mod' .                                    (rule 66)

	'('            reduce using rule 66
	'-'            reduce using rule 66
	'false'        reduce using rule 66
	'not'          reduce using rule 66
	'true'         reduce using rule 66
	L_ident        reduce using rule 66
	L_integ        reduce using rule 66
	L_quoted       reduce using rule 66


State 80

	Item -> Ident .                                     (rule 25)
	Item -> Ident . '=' Expr                            (rule 26)

	';'            reduce using rule 25
	'='            shift, and enter state 88


State 81

	Stmt -> Type Item . ';'                             (rule 10)

	';'            shift, and enter state 87


State 82

	Expr6 -> Ident '(' . ListExpr ')'                   (rule 43)

	'('            shift, and enter state 18
	')'            reduce using rule 59
	'-'            shift, and enter state 19
	'false'        shift, and enter state 25
	'not'          shift, and enter state 32
	'true'         shift, and enter state 37
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 85
	ListExpr       goto state 86

State 83

	Stmt -> Ident '=' . Expr ';'                        (rule 12)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'false'        shift, and enter state 25
	'not'          shift, and enter state 32
	'true'         shift, and enter state 37
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 84

State 84

	Stmt -> Ident '=' Expr . ';'                        (rule 12)

	';'            shift, and enter state 119


State 85

	ListExpr -> Expr .                                  (rule 60)
	ListExpr -> Expr . ',' ListExpr                     (rule 61)

	')'            reduce using rule 60
	','            shift, and enter state 118


State 86

	Expr6 -> Ident '(' ListExpr . ')'                   (rule 43)

	')'            shift, and enter state 117


State 87

	Stmt -> Type Item ';' .                             (rule 10)

	'('            reduce using rule 10
	'-'            reduce using rule 10
	';'            reduce using rule 10
	'bool'         reduce using rule 10
	'char'         reduce using rule 10
	'dec'          reduce using rule 10
	'else'         reduce using rule 10
	'exit'         reduce using rule 10
	'false'        reduce using rule 10
	'from'         reduce using rule 10
	'fun'          reduce using rule 10
	'if'           reduce using rule 10
	'immutable'    reduce using rule 10
	'inc'          reduce using rule 10
	'int'          reduce using rule 10
	'not'          reduce using rule 10
	'print'        reduce using rule 10
	'return'       reduce using rule 10
	'skiploop'     reduce using rule 10
	'string'       reduce using rule 10
	'true'         reduce using rule 10
	'void'         reduce using rule 10
	'while'        reduce using rule 10
	'{'            reduce using rule 10
	'}'            reduce using rule 10
	L_ident        reduce using rule 10
	L_integ        reduce using rule 10
	L_quoted       reduce using rule 10
	%eof           reduce using rule 10


State 88

	Item -> Ident '=' . Expr                            (rule 26)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'false'        shift, and enter state 25
	'not'          shift, and enter state 32
	'true'         shift, and enter state 37
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 116

State 89

	Expr4 -> Expr4 MulOp Expr5 .                        (rule 49)

	')'            reduce using rule 49
	'*'            reduce using rule 49
	'+'            reduce using rule 49
	','            reduce using rule 49
	'-'            reduce using rule 49
	'/'            reduce using rule 49
	';'            reduce using rule 49
	'<'            reduce using rule 49
	'<='           reduce using rule 49
	'>'            reduce using rule 49
	'>='           reduce using rule 49
	'and'          reduce using rule 49
	'do'           reduce using rule 49
	'is'           reduce using rule 49
	'is not'       reduce using rule 49
	'mod'          reduce using rule 49
	'or'           reduce using rule 49
	'to'           reduce using rule 49


State 90

	Expr4 -> Expr4 . MulOp Expr5                        (rule 49)
	Expr3 -> Expr3 AddOp Expr4 .                        (rule 51)

	')'            reduce using rule 51
	'*'            shift, and enter state 77
	'+'            reduce using rule 51
	','            reduce using rule 51
	'-'            reduce using rule 51
	'/'            shift, and enter state 78
	';'            reduce using rule 51
	'<'            reduce using rule 51
	'<='           reduce using rule 51
	'>'            reduce using rule 51
	'>='           reduce using rule 51
	'and'          reduce using rule 51
	'do'           reduce using rule 51
	'is'           reduce using rule 51
	'is not'       reduce using rule 51
	'mod'          shift, and enter state 79
	'or'           reduce using rule 51
	'to'           reduce using rule 51

	MulOp          goto state 76

State 91

	Expr1 -> Expr2 'and' Expr1 .                        (rule 55)

	')'            reduce using rule 55
	','            reduce using rule 55
	';'            reduce using rule 55
	'do'           reduce using rule 55
	'or'           reduce using rule 55
	'to'           reduce using rule 55


State 92

	Expr3 -> Expr3 . AddOp Expr4                        (rule 51)
	Expr2 -> Expr2 RelOp Expr3 .                        (rule 53)

	')'            reduce using rule 53
	'+'            shift, and enter state 74
	','            reduce using rule 53
	'-'            shift, and enter state 75
	';'            reduce using rule 53
	'<'            reduce using rule 53
	'<='           reduce using rule 53
	'>'            reduce using rule 53
	'>='           reduce using rule 53
	'and'          reduce using rule 53
	'do'           reduce using rule 53
	'is'           reduce using rule 53
	'is not'       reduce using rule 53
	'or'           reduce using rule 53
	'to'           reduce using rule 53

	AddOp          goto state 73

State 93

	Expr -> Expr1 'or' Expr .                           (rule 57)

	')'            reduce using rule 57
	','            reduce using rule 57
	';'            reduce using rule 57
	'do'           reduce using rule 57
	'to'           reduce using rule 57


State 94

	Arg -> 'ref' Type . Ident                           (rule 34)

	L_ident        shift, and enter state 2

	Ident          goto state 115

State 95

	Expr6 -> '(' Expr ')' .                             (rule 45)

	')'            reduce using rule 45
	'*'            reduce using rule 45
	'+'            reduce using rule 45
	','            reduce using rule 45
	'-'            reduce using rule 45
	'/'            reduce using rule 45
	';'            reduce using rule 45
	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'>'            reduce using rule 45
	'>='           reduce using rule 45
	'and'          reduce using rule 45
	'do'           reduce using rule 45
	'is'           reduce using rule 45
	'is not'       reduce using rule 45
	'mod'          reduce using rule 45
	'or'           reduce using rule 45
	'to'           reduce using rule 45


State 96

	Expr6 -> '(' ListArg ')' . '->' Type ':' Block      (rule 42)

	'->'           shift, and enter state 114


State 97

	ListArg -> Arg ',' . ListArg                        (rule 37)

	')'            reduce using rule 35
	'bool'         shift, and enter state 21
	'char'         shift, and enter state 22
	'fun'          shift, and enter state 27
	'int'          shift, and enter state 31
	'ref'          shift, and enter state 62
	'string'       shift, and enter state 36
	'void'         shift, and enter state 38

	Type           goto state 58
	Arg            goto state 59
	ListArg        goto state 113

State 98

	Arg -> Type Ident .                                 (rule 33)

	')'            reduce using rule 33
	','            reduce using rule 33


State 99

	Stmt -> 'dec' Ident ';' .                           (rule 14)

	'('            reduce using rule 14
	'-'            reduce using rule 14
	';'            reduce using rule 14
	'bool'         reduce using rule 14
	'char'         reduce using rule 14
	'dec'          reduce using rule 14
	'else'         reduce using rule 14
	'exit'         reduce using rule 14
	'false'        reduce using rule 14
	'from'         reduce using rule 14
	'fun'          reduce using rule 14
	'if'           reduce using rule 14
	'immutable'    reduce using rule 14
	'inc'          reduce using rule 14
	'int'          reduce using rule 14
	'not'          reduce using rule 14
	'print'        reduce using rule 14
	'return'       reduce using rule 14
	'skiploop'     reduce using rule 14
	'string'       reduce using rule 14
	'true'         reduce using rule 14
	'void'         reduce using rule 14
	'while'        reduce using rule 14
	'{'            reduce using rule 14
	'}'            reduce using rule 14
	L_ident        reduce using rule 14
	L_integ        reduce using rule 14
	L_quoted       reduce using rule 14
	%eof           reduce using rule 14


State 100

	Stmt -> 'from' Ident '=' . Expr 'to' Expr 'do' Stmt    (rule 20)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'false'        shift, and enter state 25
	'not'          shift, and enter state 32
	'true'         shift, and enter state 37
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 112

State 101

	Stmt -> 'if' '(' Expr . ')' Stmt                    (rule 17)
	Stmt -> 'if' '(' Expr . ')' Stmt 'else' Stmt        (rule 18)

	')'            shift, and enter state 111


State 102

	Stmt -> 'immutable' Type Item . ';'                 (rule 11)

	';'            shift, and enter state 110


State 103

	Stmt -> 'inc' Ident ';' .                           (rule 13)

	'('            reduce using rule 13
	'-'            reduce using rule 13
	';'            reduce using rule 13
	'bool'         reduce using rule 13
	'char'         reduce using rule 13
	'dec'          reduce using rule 13
	'else'         reduce using rule 13
	'exit'         reduce using rule 13
	'false'        reduce using rule 13
	'from'         reduce using rule 13
	'fun'          reduce using rule 13
	'if'           reduce using rule 13
	'immutable'    reduce using rule 13
	'inc'          reduce using rule 13
	'int'          reduce using rule 13
	'not'          reduce using rule 13
	'print'        reduce using rule 13
	'return'       reduce using rule 13
	'skiploop'     reduce using rule 13
	'string'       reduce using rule 13
	'true'         reduce using rule 13
	'void'         reduce using rule 13
	'while'        reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13
	L_ident        reduce using rule 13
	L_integ        reduce using rule 13
	L_quoted       reduce using rule 13
	%eof           reduce using rule 13


State 104

	Stmt -> 'print' '(' Expr . ')' ';'                  (rule 21)

	')'            shift, and enter state 109


State 105

	Stmt -> 'return' Expr ';' .                         (rule 15)

	'('            reduce using rule 15
	'-'            reduce using rule 15
	';'            reduce using rule 15
	'bool'         reduce using rule 15
	'char'         reduce using rule 15
	'dec'          reduce using rule 15
	'else'         reduce using rule 15
	'exit'         reduce using rule 15
	'false'        reduce using rule 15
	'from'         reduce using rule 15
	'fun'          reduce using rule 15
	'if'           reduce using rule 15
	'immutable'    reduce using rule 15
	'inc'          reduce using rule 15
	'int'          reduce using rule 15
	'not'          reduce using rule 15
	'print'        reduce using rule 15
	'return'       reduce using rule 15
	'skiploop'     reduce using rule 15
	'string'       reduce using rule 15
	'true'         reduce using rule 15
	'void'         reduce using rule 15
	'while'        reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15
	L_ident        reduce using rule 15
	L_integ        reduce using rule 15
	L_quoted       reduce using rule 15
	%eof           reduce using rule 15


State 106

	Stmt -> 'while' '(' Expr . ')' Stmt                 (rule 19)

	')'            shift, and enter state 108


State 107

	Block -> '{' ListStmt '}' .                         (rule 5)

	'('            reduce using rule 5
	')'            reduce using rule 5
	'*'            reduce using rule 5
	'+'            reduce using rule 5
	','            reduce using rule 5
	'-'            reduce using rule 5
	'/'            reduce using rule 5
	';'            reduce using rule 5
	'<'            reduce using rule 5
	'<='           reduce using rule 5
	'>'            reduce using rule 5
	'>='           reduce using rule 5
	'and'          reduce using rule 5
	'bool'         reduce using rule 5
	'char'         reduce using rule 5
	'dec'          reduce using rule 5
	'do'           reduce using rule 5
	'else'         reduce using rule 5
	'exit'         reduce using rule 5
	'false'        reduce using rule 5
	'from'         reduce using rule 5
	'fun'          reduce using rule 5
	'if'           reduce using rule 5
	'immutable'    reduce using rule 5
	'inc'          reduce using rule 5
	'int'          reduce using rule 5
	'is'           reduce using rule 5
	'is not'       reduce using rule 5
	'mod'          reduce using rule 5
	'not'          reduce using rule 5
	'or'           reduce using rule 5
	'print'        reduce using rule 5
	'return'       reduce using rule 5
	'skiploop'     reduce using rule 5
	'string'       reduce using rule 5
	'to'           reduce using rule 5
	'true'         reduce using rule 5
	'void'         reduce using rule 5
	'while'        reduce using rule 5
	'{'            reduce using rule 5
	'}'            reduce using rule 5
	L_ident        reduce using rule 5
	L_integ        reduce using rule 5
	L_quoted       reduce using rule 5
	%eof           reduce using rule 5


State 108

	Stmt -> 'while' '(' Expr ')' . Stmt                 (rule 19)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	';'            shift, and enter state 20
	'bool'         shift, and enter state 21
	'char'         shift, and enter state 22
	'dec'          shift, and enter state 23
	'exit'         shift, and enter state 24
	'false'        shift, and enter state 25
	'from'         shift, and enter state 26
	'fun'          shift, and enter state 27
	'if'           shift, and enter state 28
	'immutable'    shift, and enter state 29
	'inc'          shift, and enter state 30
	'int'          shift, and enter state 31
	'not'          shift, and enter state 32
	'print'        shift, and enter state 33
	'return'       shift, and enter state 34
	'skiploop'     shift, and enter state 35
	'string'       shift, and enter state 36
	'true'         shift, and enter state 37
	'void'         shift, and enter state 38
	'while'        shift, and enter state 39
	'{'            shift, and enter state 40
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 5
	Integer        goto state 6
	String         goto state 7
	Block          goto state 8
	Stmt           goto state 125
	Type           goto state 10
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 17

State 109

	Stmt -> 'print' '(' Expr ')' . ';'                  (rule 21)

	';'            shift, and enter state 124


State 110

	Stmt -> 'immutable' Type Item ';' .                 (rule 11)

	'('            reduce using rule 11
	'-'            reduce using rule 11
	';'            reduce using rule 11
	'bool'         reduce using rule 11
	'char'         reduce using rule 11
	'dec'          reduce using rule 11
	'else'         reduce using rule 11
	'exit'         reduce using rule 11
	'false'        reduce using rule 11
	'from'         reduce using rule 11
	'fun'          reduce using rule 11
	'if'           reduce using rule 11
	'immutable'    reduce using rule 11
	'inc'          reduce using rule 11
	'int'          reduce using rule 11
	'not'          reduce using rule 11
	'print'        reduce using rule 11
	'return'       reduce using rule 11
	'skiploop'     reduce using rule 11
	'string'       reduce using rule 11
	'true'         reduce using rule 11
	'void'         reduce using rule 11
	'while'        reduce using rule 11
	'{'            reduce using rule 11
	'}'            reduce using rule 11
	L_ident        reduce using rule 11
	L_integ        reduce using rule 11
	L_quoted       reduce using rule 11
	%eof           reduce using rule 11


State 111

	Stmt -> 'if' '(' Expr ')' . Stmt                    (rule 17)
	Stmt -> 'if' '(' Expr ')' . Stmt 'else' Stmt        (rule 18)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	';'            shift, and enter state 20
	'bool'         shift, and enter state 21
	'char'         shift, and enter state 22
	'dec'          shift, and enter state 23
	'exit'         shift, and enter state 24
	'false'        shift, and enter state 25
	'from'         shift, and enter state 26
	'fun'          shift, and enter state 27
	'if'           shift, and enter state 28
	'immutable'    shift, and enter state 29
	'inc'          shift, and enter state 30
	'int'          shift, and enter state 31
	'not'          shift, and enter state 32
	'print'        shift, and enter state 33
	'return'       shift, and enter state 34
	'skiploop'     shift, and enter state 35
	'string'       shift, and enter state 36
	'true'         shift, and enter state 37
	'void'         shift, and enter state 38
	'while'        shift, and enter state 39
	'{'            shift, and enter state 40
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 5
	Integer        goto state 6
	String         goto state 7
	Block          goto state 8
	Stmt           goto state 123
	Type           goto state 10
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 17

State 112

	Stmt -> 'from' Ident '=' Expr . 'to' Expr 'do' Stmt    (rule 20)

	'to'           shift, and enter state 122


State 113

	ListArg -> Arg ',' ListArg .                        (rule 37)

	')'            reduce using rule 37


State 114

	Expr6 -> '(' ListArg ')' '->' . Type ':' Block      (rule 42)

	'bool'         shift, and enter state 21
	'char'         shift, and enter state 22
	'fun'          shift, and enter state 27
	'int'          shift, and enter state 31
	'string'       shift, and enter state 36
	'void'         shift, and enter state 38

	Type           goto state 121

State 115

	Arg -> 'ref' Type Ident .                           (rule 34)

	')'            reduce using rule 34
	','            reduce using rule 34


State 116

	Item -> Ident '=' Expr .                            (rule 26)

	';'            reduce using rule 26


State 117

	Expr6 -> Ident '(' ListExpr ')' .                   (rule 43)

	')'            reduce using rule 43
	'*'            reduce using rule 43
	'+'            reduce using rule 43
	','            reduce using rule 43
	'-'            reduce using rule 43
	'/'            reduce using rule 43
	';'            reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'>'            reduce using rule 43
	'>='           reduce using rule 43
	'and'          reduce using rule 43
	'do'           reduce using rule 43
	'is'           reduce using rule 43
	'is not'       reduce using rule 43
	'mod'          reduce using rule 43
	'or'           reduce using rule 43
	'to'           reduce using rule 43


State 118

	ListExpr -> Expr ',' . ListExpr                     (rule 61)

	'('            shift, and enter state 18
	')'            reduce using rule 59
	'-'            shift, and enter state 19
	'false'        shift, and enter state 25
	'not'          shift, and enter state 32
	'true'         shift, and enter state 37
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 85
	ListExpr       goto state 120

State 119

	Stmt -> Ident '=' Expr ';' .                        (rule 12)

	'('            reduce using rule 12
	'-'            reduce using rule 12
	';'            reduce using rule 12
	'bool'         reduce using rule 12
	'char'         reduce using rule 12
	'dec'          reduce using rule 12
	'else'         reduce using rule 12
	'exit'         reduce using rule 12
	'false'        reduce using rule 12
	'from'         reduce using rule 12
	'fun'          reduce using rule 12
	'if'           reduce using rule 12
	'immutable'    reduce using rule 12
	'inc'          reduce using rule 12
	'int'          reduce using rule 12
	'not'          reduce using rule 12
	'print'        reduce using rule 12
	'return'       reduce using rule 12
	'skiploop'     reduce using rule 12
	'string'       reduce using rule 12
	'true'         reduce using rule 12
	'void'         reduce using rule 12
	'while'        reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	L_ident        reduce using rule 12
	L_integ        reduce using rule 12
	L_quoted       reduce using rule 12
	%eof           reduce using rule 12


State 120

	ListExpr -> Expr ',' ListExpr .                     (rule 61)

	')'            reduce using rule 61


State 121

	Expr6 -> '(' ListArg ')' '->' Type . ':' Block      (rule 42)

	':'            shift, and enter state 128


State 122

	Stmt -> 'from' Ident '=' Expr 'to' . Expr 'do' Stmt    (rule 20)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'false'        shift, and enter state 25
	'not'          shift, and enter state 32
	'true'         shift, and enter state 37
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 46
	Integer        goto state 6
	String         goto state 7
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 127

State 123

	Stmt -> 'if' '(' Expr ')' Stmt .                    (rule 17)
	Stmt -> 'if' '(' Expr ')' Stmt . 'else' Stmt        (rule 18)

	'('            reduce using rule 17
	'-'            reduce using rule 17
	';'            reduce using rule 17
	'bool'         reduce using rule 17
	'char'         reduce using rule 17
	'dec'          reduce using rule 17
	'else'         shift, and enter state 126
			(reduce using rule 17)

	'exit'         reduce using rule 17
	'false'        reduce using rule 17
	'from'         reduce using rule 17
	'fun'          reduce using rule 17
	'if'           reduce using rule 17
	'immutable'    reduce using rule 17
	'inc'          reduce using rule 17
	'int'          reduce using rule 17
	'not'          reduce using rule 17
	'print'        reduce using rule 17
	'return'       reduce using rule 17
	'skiploop'     reduce using rule 17
	'string'       reduce using rule 17
	'true'         reduce using rule 17
	'void'         reduce using rule 17
	'while'        reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	L_ident        reduce using rule 17
	L_integ        reduce using rule 17
	L_quoted       reduce using rule 17
	%eof           reduce using rule 17


State 124

	Stmt -> 'print' '(' Expr ')' ';' .                  (rule 21)

	'('            reduce using rule 21
	'-'            reduce using rule 21
	';'            reduce using rule 21
	'bool'         reduce using rule 21
	'char'         reduce using rule 21
	'dec'          reduce using rule 21
	'else'         reduce using rule 21
	'exit'         reduce using rule 21
	'false'        reduce using rule 21
	'from'         reduce using rule 21
	'fun'          reduce using rule 21
	'if'           reduce using rule 21
	'immutable'    reduce using rule 21
	'inc'          reduce using rule 21
	'int'          reduce using rule 21
	'not'          reduce using rule 21
	'print'        reduce using rule 21
	'return'       reduce using rule 21
	'skiploop'     reduce using rule 21
	'string'       reduce using rule 21
	'true'         reduce using rule 21
	'void'         reduce using rule 21
	'while'        reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	L_ident        reduce using rule 21
	L_integ        reduce using rule 21
	L_quoted       reduce using rule 21
	%eof           reduce using rule 21


State 125

	Stmt -> 'while' '(' Expr ')' Stmt .                 (rule 19)

	'('            reduce using rule 19
	'-'            reduce using rule 19
	';'            reduce using rule 19
	'bool'         reduce using rule 19
	'char'         reduce using rule 19
	'dec'          reduce using rule 19
	'else'         reduce using rule 19
	'exit'         reduce using rule 19
	'false'        reduce using rule 19
	'from'         reduce using rule 19
	'fun'          reduce using rule 19
	'if'           reduce using rule 19
	'immutable'    reduce using rule 19
	'inc'          reduce using rule 19
	'int'          reduce using rule 19
	'not'          reduce using rule 19
	'print'        reduce using rule 19
	'return'       reduce using rule 19
	'skiploop'     reduce using rule 19
	'string'       reduce using rule 19
	'true'         reduce using rule 19
	'void'         reduce using rule 19
	'while'        reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	L_ident        reduce using rule 19
	L_integ        reduce using rule 19
	L_quoted       reduce using rule 19
	%eof           reduce using rule 19


State 126

	Stmt -> 'if' '(' Expr ')' Stmt 'else' . Stmt        (rule 18)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	';'            shift, and enter state 20
	'bool'         shift, and enter state 21
	'char'         shift, and enter state 22
	'dec'          shift, and enter state 23
	'exit'         shift, and enter state 24
	'false'        shift, and enter state 25
	'from'         shift, and enter state 26
	'fun'          shift, and enter state 27
	'if'           shift, and enter state 28
	'immutable'    shift, and enter state 29
	'inc'          shift, and enter state 30
	'int'          shift, and enter state 31
	'not'          shift, and enter state 32
	'print'        shift, and enter state 33
	'return'       shift, and enter state 34
	'skiploop'     shift, and enter state 35
	'string'       shift, and enter state 36
	'true'         shift, and enter state 37
	'void'         shift, and enter state 38
	'while'        shift, and enter state 39
	'{'            shift, and enter state 40
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 5
	Integer        goto state 6
	String         goto state 7
	Block          goto state 8
	Stmt           goto state 131
	Type           goto state 10
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 17

State 127

	Stmt -> 'from' Ident '=' Expr 'to' Expr . 'do' Stmt    (rule 20)

	'do'           shift, and enter state 130


State 128

	Expr6 -> '(' ListArg ')' '->' Type ':' . Block      (rule 42)

	'{'            shift, and enter state 40

	Block          goto state 129

State 129

	Expr6 -> '(' ListArg ')' '->' Type ':' Block .      (rule 42)

	')'            reduce using rule 42
	'*'            reduce using rule 42
	'+'            reduce using rule 42
	','            reduce using rule 42
	'-'            reduce using rule 42
	'/'            reduce using rule 42
	';'            reduce using rule 42
	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'>'            reduce using rule 42
	'>='           reduce using rule 42
	'and'          reduce using rule 42
	'do'           reduce using rule 42
	'is'           reduce using rule 42
	'is not'       reduce using rule 42
	'mod'          reduce using rule 42
	'or'           reduce using rule 42
	'to'           reduce using rule 42


State 130

	Stmt -> 'from' Ident '=' Expr 'to' Expr 'do' . Stmt    (rule 20)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	';'            shift, and enter state 20
	'bool'         shift, and enter state 21
	'char'         shift, and enter state 22
	'dec'          shift, and enter state 23
	'exit'         shift, and enter state 24
	'false'        shift, and enter state 25
	'from'         shift, and enter state 26
	'fun'          shift, and enter state 27
	'if'           shift, and enter state 28
	'immutable'    shift, and enter state 29
	'inc'          shift, and enter state 30
	'int'          shift, and enter state 31
	'not'          shift, and enter state 32
	'print'        shift, and enter state 33
	'return'       shift, and enter state 34
	'skiploop'     shift, and enter state 35
	'string'       shift, and enter state 36
	'true'         shift, and enter state 37
	'void'         shift, and enter state 38
	'while'        shift, and enter state 39
	'{'            shift, and enter state 40
	L_ident        shift, and enter state 2
	L_integ        shift, and enter state 41
	L_quoted       shift, and enter state 42

	Ident          goto state 5
	Integer        goto state 6
	String         goto state 7
	Block          goto state 8
	Stmt           goto state 132
	Type           goto state 10
	Expr6          goto state 11
	Expr5          goto state 12
	Expr4          goto state 13
	Expr3          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 17

State 131

	Stmt -> 'if' '(' Expr ')' Stmt 'else' Stmt .        (rule 18)

	'('            reduce using rule 18
	'-'            reduce using rule 18
	';'            reduce using rule 18
	'bool'         reduce using rule 18
	'char'         reduce using rule 18
	'dec'          reduce using rule 18
	'else'         reduce using rule 18
	'exit'         reduce using rule 18
	'false'        reduce using rule 18
	'from'         reduce using rule 18
	'fun'          reduce using rule 18
	'if'           reduce using rule 18
	'immutable'    reduce using rule 18
	'inc'          reduce using rule 18
	'int'          reduce using rule 18
	'not'          reduce using rule 18
	'print'        reduce using rule 18
	'return'       reduce using rule 18
	'skiploop'     reduce using rule 18
	'string'       reduce using rule 18
	'true'         reduce using rule 18
	'void'         reduce using rule 18
	'while'        reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	L_ident        reduce using rule 18
	L_integ        reduce using rule 18
	L_quoted       reduce using rule 18
	%eof           reduce using rule 18


State 132

	Stmt -> 'from' Ident '=' Expr 'to' Expr 'do' Stmt .    (rule 20)

	'('            reduce using rule 20
	'-'            reduce using rule 20
	';'            reduce using rule 20
	'bool'         reduce using rule 20
	'char'         reduce using rule 20
	'dec'          reduce using rule 20
	'else'         reduce using rule 20
	'exit'         reduce using rule 20
	'false'        reduce using rule 20
	'from'         reduce using rule 20
	'fun'          reduce using rule 20
	'if'           reduce using rule 20
	'immutable'    reduce using rule 20
	'inc'          reduce using rule 20
	'int'          reduce using rule 20
	'not'          reduce using rule 20
	'print'        reduce using rule 20
	'return'       reduce using rule 20
	'skiploop'     reduce using rule 20
	'string'       reduce using rule 20
	'true'         reduce using rule 20
	'void'         reduce using rule 20
	'while'        reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	L_ident        reduce using rule 20
	L_integ        reduce using rule 20
	L_quoted       reduce using rule 20
	%eof           reduce using rule 20


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 73
Number of terminals: 48
Number of non-terminals: 23
Number of states: 133
