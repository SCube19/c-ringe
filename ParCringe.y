-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParCringe where
import AbsCringe
import LexCringe
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  ',' { PT _ (TS _ 5) }
  '-' { PT _ (TS _ 6) }
  '->' { PT _ (TS _ 7) }
  '/' { PT _ (TS _ 8) }
  ':' { PT _ (TS _ 9) }
  ';' { PT _ (TS _ 10) }
  '<' { PT _ (TS _ 11) }
  '<=' { PT _ (TS _ 12) }
  '=' { PT _ (TS _ 13) }
  '>' { PT _ (TS _ 14) }
  '>=' { PT _ (TS _ 15) }
  'and' { PT _ (TS _ 16) }
  'bool' { PT _ (TS _ 17) }
  'char' { PT _ (TS _ 18) }
  'dec' { PT _ (TS _ 19) }
  'do' { PT _ (TS _ 20) }
  'else' { PT _ (TS _ 21) }
  'exit' { PT _ (TS _ 22) }
  'false' { PT _ (TS _ 23) }
  'from' { PT _ (TS _ 24) }
  'fun' { PT _ (TS _ 25) }
  'if' { PT _ (TS _ 26) }
  'immutable' { PT _ (TS _ 27) }
  'inc' { PT _ (TS _ 28) }
  'int' { PT _ (TS _ 29) }
  'is' { PT _ (TS _ 30) }
  'is not' { PT _ (TS _ 31) }
  'mod' { PT _ (TS _ 32) }
  'not' { PT _ (TS _ 33) }
  'or' { PT _ (TS _ 34) }
  'print' { PT _ (TS _ 35) }
  'ref' { PT _ (TS _ 36) }
  'return' { PT _ (TS _ 37) }
  'skipit' { PT _ (TS _ 38) }
  'string' { PT _ (TS _ 39) }
  'to' { PT _ (TS _ 40) }
  'true' { PT _ (TS _ 41) }
  'void' { PT _ (TS _ 42) }
  'while' { PT _ (TS _ 43) }
  '{' { PT _ (TS _ 44) }
  '}' { PT _ (TS _ 45) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_charac { PT _ (TC $$) }
L_quoted { PT _ (TL $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }
String  :: { String }  : L_quoted {  $1 }

Program :: { Program }
Program : ListStmt { AbsCringe.Program (reverse $1) }
Block :: { Block }
Block : '{' ListStmt '}' { AbsCringe.Block (reverse $2) }
ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] } | ListStmt Stmt { flip (:) $1 $2 }
Stmt :: { Stmt }
Stmt : ';' { AbsCringe.Empty }
     | Block { AbsCringe.BStmt $1 }
     | Type Item ';' { AbsCringe.Decl $1 $2 }
     | 'immutable' Type Item ';' { AbsCringe.ConstDecl $2 $3 }
     | Ident '=' Expr ';' { AbsCringe.Ass $1 $3 }
     | 'inc' Ident ';' { AbsCringe.Incr $2 }
     | 'dec' Ident ';' { AbsCringe.Decr $2 }
     | 'return' Expr ';' { AbsCringe.Ret $2 }
     | 'return' ';' { AbsCringe.VRet }
     | 'if' '(' Expr ')' Stmt { AbsCringe.Cond $3 $5 }
     | 'if' '(' Expr ')' Block 'else' Block { AbsCringe.CondElse $3 $5 $7 }
     | 'while' '(' Expr ')' Stmt { AbsCringe.While $3 $5 }
     | 'from' Ident '=' Expr 'to' Expr 'do' Stmt { AbsCringe.For $2 $4 $6 $8 }
     | 'print' '(' Expr ')' ';' { AbsCringe.Print $3 }
     | 'exit' ';' { AbsCringe.Break }
     | 'skipit' ';' { AbsCringe.Continue }
     | Expr ';' { AbsCringe.SExp $1 }
Item :: { Item }
Item : Ident { AbsCringe.NoInit $1 }
     | Ident '=' Expr { AbsCringe.Init $1 $3 }
Type :: { Type }
Type : 'int' { AbsCringe.Int }
     | 'char' { AbsCringe.Char }
     | 'string' { AbsCringe.Str }
     | 'bool' { AbsCringe.Bool }
     | 'void' { AbsCringe.Void }
     | 'fun' { AbsCringe.Fun }
Arg :: { Arg }
Arg : Type Ident { AbsCringe.Arg $1 $2 }
    | 'ref' Type Ident { AbsCringe.RefArg $2 $3 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Expr6 :: { Expr }
Expr6 : Ident { AbsCringe.EVar $1 }
      | Integer { AbsCringe.ELitInt $1 }
      | Char { AbsCringe.ELitChar $1 }
      | String { AbsCringe.EString $1 }
      | 'true' { AbsCringe.ELitTrue }
      | 'false' { AbsCringe.ELitFalse }
      | '(' ListArg ')' '->' Type ':' Block { AbsCringe.ELambda $2 $5 $7 }
      | Ident '(' ListExpr ')' { AbsCringe.EApp $1 $3 }
      | '(' Expr ')' { $2 }
Expr5 :: { Expr }
Expr5 : '-' Expr6 { AbsCringe.Neg $2 }
      | 'not' Expr6 { AbsCringe.Not $2 }
      | Expr6 { $1 }
Expr4 :: { Expr }
Expr4 : Expr4 MulOp Expr5 { AbsCringe.EMul $1 $2 $3 }
      | Expr5 { $1 }
Expr3 :: { Expr }
Expr3 : Expr3 AddOp Expr4 { AbsCringe.EAdd $1 $2 $3 }
      | Expr4 { $1 }
Expr2 :: { Expr }
Expr2 : Expr2 RelOp Expr3 { AbsCringe.ERel $1 $2 $3 }
      | Expr3 { $1 }
Expr1 :: { Expr }
Expr1 : Expr2 'and' Expr1 { AbsCringe.EAnd $1 $3 } | Expr2 { $1 }
Expr :: { Expr }
Expr : Expr1 'or' Expr { AbsCringe.EOr $1 $3 } | Expr1 { $1 }
ListExpr :: { [Expr] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }
AddOp :: { AddOp }
AddOp : '+' { AbsCringe.Plus } | '-' { AbsCringe.Minus }
MulOp :: { MulOp }
MulOp : '*' { AbsCringe.Times }
      | '/' { AbsCringe.Div }
      | 'mod' { AbsCringe.Mod }
RelOp :: { RelOp }
RelOp : '<' { AbsCringe.LTH }
      | '<=' { AbsCringe.LE }
      | '>' { AbsCringe.GTH }
      | '>=' { AbsCringe.GE }
      | 'is' { AbsCringe.EQU }
      | 'is not' { AbsCringe.NE }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

