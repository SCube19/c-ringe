Build:
    make

Running:
    File mode: ./interpreter [ścieżka do pliku]
    Interactive mode: ./interpreter

Description:
    C(ringe) Language © 

    A program is a string of statements without any need of main function.
    Variables are global or scoped when enclosed in block (similiar to javascript or python).

    Every statement ends with a semicolon (;).

    Functions are defined by creating a variable of type fun with argument types and return type, for example:

    immutable fun [int -> void] f = (int x) -> void {
    };

    Which creates constant procedure that takes integer input and returns nothing.

    Statements are:
        - Block statement (standard c-style block {}) which encloses statements, defines scope and is often required
        - Declaration statements which include :
            - Standard c-style [type identifier;] definition
            - Constant definition with syntax : [immutable type identifier;]
        - Standard assigment statement
        - Increment and decrement with syntax : [inc identifier;] [dec identifier;] respectively where identifiers must be integers
        - Standard return statement
        - Standard if and if-else statements (if can be paired with non-block statement, if-else requires blocks)
        - Standard c-style while loop statement
        - Range for loop with syntax : [from identifier = expression to expression do stmts] that creates immutable identifier
        - Build-in print statement that can print everything except functions
        - Continue and break with syntax : [skip;] and [exit;] respectively
        - Expressions can be statements too

    Supported types:
        - int
        - char
        - string 
        - bool 
        - fun
        - void (return type only)

    Expressions are:
        - Literals for every type except void
        - Lamba expressions (literal of type fun) with syntax : (args) -> (return type) {function body}
        - Standard function application
        - Standard arithmetic operations (except modulo which is mod instead of %)
            - contatenating of strings supported with + operator
        - Boolean arithmetic with syntax : (== as is), (!= as is not), (! as not), (&& as and), (|| as or)
            - relational operator arguments must be of same type
            - relational operator supports everything except functions 
            - boolean or, and, not, support intergers and bools

    Interpreter performs a static check before evaluation which makes C(ringe) statically-typed
    and statically-bound language.


Files:
    bad:
        evaluator: examples of programs that result in runtime error
        parser: examples of programs that result in syntax error
        typechecker: examples of programs that result in static error 
    Bnfc:
        cringe.cf: bnfc grammar of c(ringe)
        rest: files generated by bnfc 
    Evaluator:
         Evaluator.hs: functions evaluating statements and expressions
         EvaluatorData.hs: evaluator states, state modification functions and exceptions 
         EvaluatorUtils.hs: any helper function for evaluator that doesn't end up as circular dependency 
    good: examples of correct programs in c(ringe)
    Typechecker:
        TypeChecker.hs: functions typechecking the program and their helper functions
        TypeCheckerData.hs: typechecker states, state modification and exceptions
    Main.hs: starting point of interpreter 
    Makefile: build script  
    ProjectUtils.hs: helper functions, helpful for entire project
    README: that file 
    requirements.txt: jpp language requirements with implemented features marked as (checked) 
    test.sh: very basic testing script

    
    
