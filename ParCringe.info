-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from ParCringe.y
-----------------------------------------------------------------------------

state 75 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram_internal -> Program                (0)
	Ident -> L_Ident                                   (1)
	Char -> L_charac                                   (2)
	Integer -> L_integ                                 (3)
	String -> L_quoted                                 (4)
	Program -> ListStmt                                (5)
	Block -> '{' ListStmt '}'                          (6)
	ListStmt ->                                        (7)
	ListStmt -> Stmt ListStmt                          (8)
	Stmt -> ';'                                        (9)
	Stmt -> Block                                      (10)
	Stmt -> Type Item ';'                              (11)
	Stmt -> 'immutable' Type Item ';'                  (12)
	Stmt -> Ident '=' Expr ';'                         (13)
	Stmt -> 'inc' Ident ';'                            (14)
	Stmt -> 'dec' Ident ';'                            (15)
	Stmt -> 'return' Expr ';'                          (16)
	Stmt -> 'return' ';'                               (17)
	Stmt -> 'if' '(' Expr ')' Stmt                     (18)
	Stmt -> 'if' '(' Expr ')' Block 'else' Block       (19)
	Stmt -> 'while' '(' Expr ')' Stmt                  (20)
	Stmt -> 'from' Ident '=' Expr 'to' Expr 'do' Stmt   (21)
	Stmt -> 'print' Expr ';'                           (22)
	Stmt -> 'exit' ';'                                 (23)
	Stmt -> 'skip' ';'                                 (24)
	Stmt -> Expr ';'                                   (25)
	Item -> Ident                                      (26)
	Item -> Ident '=' Expr                             (27)
	Type -> 'int'                                      (28)
	Type -> 'char'                                     (29)
	Type -> 'string'                                   (30)
	Type -> 'bool'                                     (31)
	Type -> 'void'                                     (32)
	Type -> 'fun' '[' ListArgType '->' Type ']'        (33)
	ArgType -> Type                                    (34)
	ArgType -> 'ref' Type                              (35)
	ListArgType ->                                     (36)
	ListArgType -> ArgType                             (37)
	ListArgType -> ArgType ',' ListArgType             (38)
	Arg -> ArgType Ident                               (39)
	ListArg ->                                         (40)
	ListArg -> Arg                                     (41)
	ListArg -> Arg ',' ListArg                         (42)
	Expr6 -> Ident                                     (43)
	Expr6 -> Integer                                   (44)
	Expr6 -> Char                                      (45)
	Expr6 -> String                                    (46)
	Expr6 -> 'true'                                    (47)
	Expr6 -> 'false'                                   (48)
	Expr6 -> '(' ListArg ')' '->' Type Block           (49)
	Expr6 -> Ident '(' ListExpr ')'                    (50)
	Expr6 -> '(' Expr ')'                              (51)
	Expr5 -> '-' Expr6                                 (52)
	Expr5 -> 'not' Expr6                               (53)
	Expr5 -> Expr6                                     (54)
	Expr4 -> Expr4 MulOp Expr5                         (55)
	Expr4 -> Expr5                                     (56)
	Expr3 -> Expr3 AddOp Expr4                         (57)
	Expr3 -> Expr4                                     (58)
	Expr2 -> Expr2 RelOp Expr3                         (59)
	Expr2 -> Expr3                                     (60)
	Expr1 -> Expr2 'and' Expr1                         (61)
	Expr1 -> Expr2                                     (62)
	Expr -> Expr1 'or' Expr                            (63)
	Expr -> Expr1                                      (64)
	ListExpr ->                                        (65)
	ListExpr -> Expr                                   (66)
	ListExpr -> Expr ',' ListExpr                      (67)
	AddOp -> '+'                                       (68)
	AddOp -> '-'                                       (69)
	MulOp -> '*'                                       (70)
	MulOp -> '/'                                       (71)
	MulOp -> 'mod'                                     (72)
	RelOp -> '<'                                       (73)
	RelOp -> '<='                                      (74)
	RelOp -> '>'                                       (75)
	RelOp -> '>='                                      (76)
	RelOp -> 'is'                                      (77)
	RelOp -> 'is' 'not'                                (78)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'+'            { PT _ (TS _ 4) }
	','            { PT _ (TS _ 5) }
	'-'            { PT _ (TS _ 6) }
	'->'           { PT _ (TS _ 7) }
	'/'            { PT _ (TS _ 8) }
	';'            { PT _ (TS _ 9) }
	'<'            { PT _ (TS _ 10) }
	'<='           { PT _ (TS _ 11) }
	'='            { PT _ (TS _ 12) }
	'>'            { PT _ (TS _ 13) }
	'>='           { PT _ (TS _ 14) }
	'['            { PT _ (TS _ 15) }
	']'            { PT _ (TS _ 16) }
	'and'          { PT _ (TS _ 17) }
	'bool'         { PT _ (TS _ 18) }
	'char'         { PT _ (TS _ 19) }
	'dec'          { PT _ (TS _ 20) }
	'do'           { PT _ (TS _ 21) }
	'else'         { PT _ (TS _ 22) }
	'exit'         { PT _ (TS _ 23) }
	'false'        { PT _ (TS _ 24) }
	'from'         { PT _ (TS _ 25) }
	'fun'          { PT _ (TS _ 26) }
	'if'           { PT _ (TS _ 27) }
	'immutable'    { PT _ (TS _ 28) }
	'inc'          { PT _ (TS _ 29) }
	'int'          { PT _ (TS _ 30) }
	'is'           { PT _ (TS _ 31) }
	'mod'          { PT _ (TS _ 32) }
	'not'          { PT _ (TS _ 33) }
	'or'           { PT _ (TS _ 34) }
	'print'        { PT _ (TS _ 35) }
	'ref'          { PT _ (TS _ 36) }
	'return'       { PT _ (TS _ 37) }
	'skip'         { PT _ (TS _ 38) }
	'string'       { PT _ (TS _ 39) }
	'to'           { PT _ (TS _ 40) }
	'true'         { PT _ (TS _ 41) }
	'void'         { PT _ (TS _ 42) }
	'while'        { PT _ (TS _ 43) }
	'{'            { PT _ (TS _ 44) }
	'}'            { PT _ (TS _ 45) }
	L_Ident        { PT _ (TV _) }
	L_charac       { PT _ (TC _) }
	L_integ        { PT _ (TI _) }
	L_quoted       { PT _ (TL _) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram_internal rule  0
	Ident           rule  1
	Char            rule  2
	Integer         rule  3
	String          rule  4
	Program         rule  5
	Block           rule  6
	ListStmt        rules 7, 8
	Stmt            rules 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25
	Item            rules 26, 27
	Type            rules 28, 29, 30, 31, 32, 33
	ArgType         rules 34, 35
	ListArgType     rules 36, 37, 38
	Arg             rule  39
	ListArg         rules 40, 41, 42
	Expr6           rules 43, 44, 45, 46, 47, 48, 49, 50, 51
	Expr5           rules 52, 53, 54
	Expr4           rules 55, 56
	Expr3           rules 57, 58
	Expr2           rules 59, 60
	Expr1           rules 61, 62
	Expr            rules 63, 64
	ListExpr        rules 65, 66, 67
	AddOp           rules 68, 69
	MulOp           rules 70, 71, 72
	RelOp           rules 73, 74, 75, 76, 77, 78

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	';'            shift, and enter state 21
	'bool'         shift, and enter state 22
	'char'         shift, and enter state 23
	'dec'          shift, and enter state 24
	'exit'         shift, and enter state 25
	'false'        shift, and enter state 26
	'from'         shift, and enter state 27
	'fun'          shift, and enter state 28
	'if'           shift, and enter state 29
	'immutable'    shift, and enter state 30
	'inc'          shift, and enter state 31
	'int'          shift, and enter state 32
	'not'          shift, and enter state 33
	'print'        shift, and enter state 34
	'return'       shift, and enter state 35
	'skip'         shift, and enter state 36
	'string'       shift, and enter state 37
	'true'         shift, and enter state 38
	'void'         shift, and enter state 39
	'while'        shift, and enter state 40
	'{'            shift, and enter state 41
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44
	%eof           reduce using rule 7

	Ident          goto state 3
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Program        goto state 7
	Block          goto state 8
	ListStmt       goto state 9
	Stmt           goto state 10
	Type           goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 18

State 1


	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'('            reduce using rule 1
	')'            reduce using rule 1
	'*'            reduce using rule 1
	'+'            reduce using rule 1
	','            reduce using rule 1
	'-'            reduce using rule 1
	'/'            reduce using rule 1
	';'            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'='            reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'and'          reduce using rule 1
	'do'           reduce using rule 1
	'is'           reduce using rule 1
	'mod'          reduce using rule 1
	'or'           reduce using rule 1
	'to'           reduce using rule 1


State 3

	Stmt -> Ident . '=' Expr ';'                        (rule 13)
	Expr6 -> Ident .                                    (rule 43)
	Expr6 -> Ident . '(' ListExpr ')'                   (rule 50)

	'('            shift, and enter state 86
	'*'            reduce using rule 43
	'+'            reduce using rule 43
	'-'            reduce using rule 43
	'/'            reduce using rule 43
	';'            reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'='            shift, and enter state 87
	'>'            reduce using rule 43
	'>='           reduce using rule 43
	'and'          reduce using rule 43
	'is'           reduce using rule 43
	'mod'          reduce using rule 43
	'or'           reduce using rule 43


State 4

	Expr6 -> Char .                                     (rule 45)

	')'            reduce using rule 45
	'*'            reduce using rule 45
	'+'            reduce using rule 45
	','            reduce using rule 45
	'-'            reduce using rule 45
	'/'            reduce using rule 45
	';'            reduce using rule 45
	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'>'            reduce using rule 45
	'>='           reduce using rule 45
	'and'          reduce using rule 45
	'do'           reduce using rule 45
	'is'           reduce using rule 45
	'mod'          reduce using rule 45
	'or'           reduce using rule 45
	'to'           reduce using rule 45


State 5

	Expr6 -> Integer .                                  (rule 44)

	')'            reduce using rule 44
	'*'            reduce using rule 44
	'+'            reduce using rule 44
	','            reduce using rule 44
	'-'            reduce using rule 44
	'/'            reduce using rule 44
	';'            reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'>'            reduce using rule 44
	'>='           reduce using rule 44
	'and'          reduce using rule 44
	'do'           reduce using rule 44
	'is'           reduce using rule 44
	'mod'          reduce using rule 44
	'or'           reduce using rule 44
	'to'           reduce using rule 44


State 6

	Expr6 -> String .                                   (rule 46)

	')'            reduce using rule 46
	'*'            reduce using rule 46
	'+'            reduce using rule 46
	','            reduce using rule 46
	'-'            reduce using rule 46
	'/'            reduce using rule 46
	';'            reduce using rule 46
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'>'            reduce using rule 46
	'>='           reduce using rule 46
	'and'          reduce using rule 46
	'do'           reduce using rule 46
	'is'           reduce using rule 46
	'mod'          reduce using rule 46
	'or'           reduce using rule 46
	'to'           reduce using rule 46


State 7

	%start_pProgram_internal -> Program .               (rule 0)

	%eof           accept


State 8

	Stmt -> Block .                                     (rule 10)

	'('            reduce using rule 10
	'-'            reduce using rule 10
	';'            reduce using rule 10
	'bool'         reduce using rule 10
	'char'         reduce using rule 10
	'dec'          reduce using rule 10
	'exit'         reduce using rule 10
	'false'        reduce using rule 10
	'from'         reduce using rule 10
	'fun'          reduce using rule 10
	'if'           reduce using rule 10
	'immutable'    reduce using rule 10
	'inc'          reduce using rule 10
	'int'          reduce using rule 10
	'not'          reduce using rule 10
	'print'        reduce using rule 10
	'return'       reduce using rule 10
	'skip'         reduce using rule 10
	'string'       reduce using rule 10
	'true'         reduce using rule 10
	'void'         reduce using rule 10
	'while'        reduce using rule 10
	'{'            reduce using rule 10
	'}'            reduce using rule 10
	L_Ident        reduce using rule 10
	L_charac       reduce using rule 10
	L_integ        reduce using rule 10
	L_quoted       reduce using rule 10
	%eof           reduce using rule 10


State 9

	Program -> ListStmt .                               (rule 5)

	%eof           reduce using rule 5


State 10

	ListStmt -> Stmt . ListStmt                         (rule 8)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	';'            shift, and enter state 21
	'bool'         shift, and enter state 22
	'char'         shift, and enter state 23
	'dec'          shift, and enter state 24
	'exit'         shift, and enter state 25
	'false'        shift, and enter state 26
	'from'         shift, and enter state 27
	'fun'          shift, and enter state 28
	'if'           shift, and enter state 29
	'immutable'    shift, and enter state 30
	'inc'          shift, and enter state 31
	'int'          shift, and enter state 32
	'not'          shift, and enter state 33
	'print'        shift, and enter state 34
	'return'       shift, and enter state 35
	'skip'         shift, and enter state 36
	'string'       shift, and enter state 37
	'true'         shift, and enter state 38
	'void'         shift, and enter state 39
	'while'        shift, and enter state 40
	'{'            shift, and enter state 41
	'}'            reduce using rule 7
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44
	%eof           reduce using rule 7

	Ident          goto state 3
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Block          goto state 8
	ListStmt       goto state 85
	Stmt           goto state 10
	Type           goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 18

State 11

	Stmt -> Type . Item ';'                             (rule 11)

	L_Ident        shift, and enter state 2

	Ident          goto state 83
	Item           goto state 84

State 12

	Expr5 -> Expr6 .                                    (rule 54)

	')'            reduce using rule 54
	'*'            reduce using rule 54
	'+'            reduce using rule 54
	','            reduce using rule 54
	'-'            reduce using rule 54
	'/'            reduce using rule 54
	';'            reduce using rule 54
	'<'            reduce using rule 54
	'<='           reduce using rule 54
	'>'            reduce using rule 54
	'>='           reduce using rule 54
	'and'          reduce using rule 54
	'do'           reduce using rule 54
	'is'           reduce using rule 54
	'mod'          reduce using rule 54
	'or'           reduce using rule 54
	'to'           reduce using rule 54


State 13

	Expr4 -> Expr5 .                                    (rule 56)

	')'            reduce using rule 56
	'*'            reduce using rule 56
	'+'            reduce using rule 56
	','            reduce using rule 56
	'-'            reduce using rule 56
	'/'            reduce using rule 56
	';'            reduce using rule 56
	'<'            reduce using rule 56
	'<='           reduce using rule 56
	'>'            reduce using rule 56
	'>='           reduce using rule 56
	'and'          reduce using rule 56
	'do'           reduce using rule 56
	'is'           reduce using rule 56
	'mod'          reduce using rule 56
	'or'           reduce using rule 56
	'to'           reduce using rule 56


State 14

	Expr4 -> Expr4 . MulOp Expr5                        (rule 55)
	Expr3 -> Expr4 .                                    (rule 58)

	')'            reduce using rule 58
	'*'            shift, and enter state 80
	'+'            reduce using rule 58
	','            reduce using rule 58
	'-'            reduce using rule 58
	'/'            shift, and enter state 81
	';'            reduce using rule 58
	'<'            reduce using rule 58
	'<='           reduce using rule 58
	'>'            reduce using rule 58
	'>='           reduce using rule 58
	'and'          reduce using rule 58
	'do'           reduce using rule 58
	'is'           reduce using rule 58
	'mod'          shift, and enter state 82
	'or'           reduce using rule 58
	'to'           reduce using rule 58

	MulOp          goto state 79

State 15

	Expr3 -> Expr3 . AddOp Expr4                        (rule 57)
	Expr2 -> Expr3 .                                    (rule 60)

	')'            reduce using rule 60
	'+'            shift, and enter state 77
	','            reduce using rule 60
	'-'            shift, and enter state 78
	';'            reduce using rule 60
	'<'            reduce using rule 60
	'<='           reduce using rule 60
	'>'            reduce using rule 60
	'>='           reduce using rule 60
	'and'          reduce using rule 60
	'do'           reduce using rule 60
	'is'           reduce using rule 60
	'or'           reduce using rule 60
	'to'           reduce using rule 60

	AddOp          goto state 76

State 16

	Expr2 -> Expr2 . RelOp Expr3                        (rule 59)
	Expr1 -> Expr2 . 'and' Expr1                        (rule 61)
	Expr1 -> Expr2 .                                    (rule 62)

	')'            reduce using rule 62
	','            reduce using rule 62
	';'            reduce using rule 62
	'<'            shift, and enter state 70
	'<='           shift, and enter state 71
	'>'            shift, and enter state 72
	'>='           shift, and enter state 73
	'and'          shift, and enter state 74
	'do'           reduce using rule 62
	'is'           shift, and enter state 75
	'or'           reduce using rule 62
	'to'           reduce using rule 62

	RelOp          goto state 69

State 17

	Expr -> Expr1 . 'or' Expr                           (rule 63)
	Expr -> Expr1 .                                     (rule 64)

	')'            reduce using rule 64
	','            reduce using rule 64
	';'            reduce using rule 64
	'do'           reduce using rule 64
	'or'           shift, and enter state 68
	'to'           reduce using rule 64


State 18

	Stmt -> Expr . ';'                                  (rule 25)

	';'            shift, and enter state 67


State 19

	Expr6 -> '(' . ListArg ')' '->' Type Block          (rule 49)
	Expr6 -> '(' . Expr ')'                             (rule 51)

	'('            shift, and enter state 19
	')'            reduce using rule 40
	'-'            shift, and enter state 20
	'bool'         shift, and enter state 22
	'char'         shift, and enter state 23
	'false'        shift, and enter state 26
	'fun'          shift, and enter state 28
	'int'          shift, and enter state 32
	'not'          shift, and enter state 33
	'ref'          shift, and enter state 66
	'string'       shift, and enter state 37
	'true'         shift, and enter state 38
	'void'         shift, and enter state 39
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Type           goto state 61
	ArgType        goto state 62
	Arg            goto state 63
	ListArg        goto state 64
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 65

State 20

	Expr5 -> '-' . Expr6                                (rule 52)

	'('            shift, and enter state 19
	'false'        shift, and enter state 26
	'true'         shift, and enter state 38
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Expr6          goto state 60

State 21

	Stmt -> ';' .                                       (rule 9)

	'('            reduce using rule 9
	'-'            reduce using rule 9
	';'            reduce using rule 9
	'bool'         reduce using rule 9
	'char'         reduce using rule 9
	'dec'          reduce using rule 9
	'exit'         reduce using rule 9
	'false'        reduce using rule 9
	'from'         reduce using rule 9
	'fun'          reduce using rule 9
	'if'           reduce using rule 9
	'immutable'    reduce using rule 9
	'inc'          reduce using rule 9
	'int'          reduce using rule 9
	'not'          reduce using rule 9
	'print'        reduce using rule 9
	'return'       reduce using rule 9
	'skip'         reduce using rule 9
	'string'       reduce using rule 9
	'true'         reduce using rule 9
	'void'         reduce using rule 9
	'while'        reduce using rule 9
	'{'            reduce using rule 9
	'}'            reduce using rule 9
	L_Ident        reduce using rule 9
	L_charac       reduce using rule 9
	L_integ        reduce using rule 9
	L_quoted       reduce using rule 9
	%eof           reduce using rule 9


State 22

	Type -> 'bool' .                                    (rule 31)

	','            reduce using rule 31
	'->'           reduce using rule 31
	']'            reduce using rule 31
	'{'            reduce using rule 31
	L_Ident        reduce using rule 31


State 23

	Type -> 'char' .                                    (rule 29)

	','            reduce using rule 29
	'->'           reduce using rule 29
	']'            reduce using rule 29
	'{'            reduce using rule 29
	L_Ident        reduce using rule 29


State 24

	Stmt -> 'dec' . Ident ';'                           (rule 15)

	L_Ident        shift, and enter state 2

	Ident          goto state 59

State 25

	Stmt -> 'exit' . ';'                                (rule 23)

	';'            shift, and enter state 58


State 26

	Expr6 -> 'false' .                                  (rule 48)

	')'            reduce using rule 48
	'*'            reduce using rule 48
	'+'            reduce using rule 48
	','            reduce using rule 48
	'-'            reduce using rule 48
	'/'            reduce using rule 48
	';'            reduce using rule 48
	'<'            reduce using rule 48
	'<='           reduce using rule 48
	'>'            reduce using rule 48
	'>='           reduce using rule 48
	'and'          reduce using rule 48
	'do'           reduce using rule 48
	'is'           reduce using rule 48
	'mod'          reduce using rule 48
	'or'           reduce using rule 48
	'to'           reduce using rule 48


State 27

	Stmt -> 'from' . Ident '=' Expr 'to' Expr 'do' Stmt    (rule 21)

	L_Ident        shift, and enter state 2

	Ident          goto state 57

State 28

	Type -> 'fun' . '[' ListArgType '->' Type ']'       (rule 33)

	'['            shift, and enter state 56


State 29

	Stmt -> 'if' . '(' Expr ')' Stmt                    (rule 18)
	Stmt -> 'if' . '(' Expr ')' Block 'else' Block      (rule 19)

	'('            shift, and enter state 55


State 30

	Stmt -> 'immutable' . Type Item ';'                 (rule 12)

	'bool'         shift, and enter state 22
	'char'         shift, and enter state 23
	'fun'          shift, and enter state 28
	'int'          shift, and enter state 32
	'string'       shift, and enter state 37
	'void'         shift, and enter state 39

	Type           goto state 54

State 31

	Stmt -> 'inc' . Ident ';'                           (rule 14)

	L_Ident        shift, and enter state 2

	Ident          goto state 53

State 32

	Type -> 'int' .                                     (rule 28)

	','            reduce using rule 28
	'->'           reduce using rule 28
	']'            reduce using rule 28
	'{'            reduce using rule 28
	L_Ident        reduce using rule 28


State 33

	Expr5 -> 'not' . Expr6                              (rule 53)

	'('            shift, and enter state 19
	'false'        shift, and enter state 26
	'true'         shift, and enter state 38
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Expr6          goto state 52

State 34

	Stmt -> 'print' . Expr ';'                          (rule 22)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	'false'        shift, and enter state 26
	'not'          shift, and enter state 33
	'true'         shift, and enter state 38
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 51

State 35

	Stmt -> 'return' . Expr ';'                         (rule 16)
	Stmt -> 'return' . ';'                              (rule 17)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	';'            shift, and enter state 50
	'false'        shift, and enter state 26
	'not'          shift, and enter state 33
	'true'         shift, and enter state 38
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 49

State 36

	Stmt -> 'skip' . ';'                                (rule 24)

	';'            shift, and enter state 47


State 37

	Type -> 'string' .                                  (rule 30)

	','            reduce using rule 30
	'->'           reduce using rule 30
	']'            reduce using rule 30
	'{'            reduce using rule 30
	L_Ident        reduce using rule 30


State 38

	Expr6 -> 'true' .                                   (rule 47)

	')'            reduce using rule 47
	'*'            reduce using rule 47
	'+'            reduce using rule 47
	','            reduce using rule 47
	'-'            reduce using rule 47
	'/'            reduce using rule 47
	';'            reduce using rule 47
	'<'            reduce using rule 47
	'<='           reduce using rule 47
	'>'            reduce using rule 47
	'>='           reduce using rule 47
	'and'          reduce using rule 47
	'do'           reduce using rule 47
	'is'           reduce using rule 47
	'mod'          reduce using rule 47
	'or'           reduce using rule 47
	'to'           reduce using rule 47


State 39

	Type -> 'void' .                                    (rule 32)

	','            reduce using rule 32
	'->'           reduce using rule 32
	']'            reduce using rule 32
	'{'            reduce using rule 32
	L_Ident        reduce using rule 32


State 40

	Stmt -> 'while' . '(' Expr ')' Stmt                 (rule 20)

	'('            shift, and enter state 46


State 41

	Block -> '{' . ListStmt '}'                         (rule 6)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	';'            shift, and enter state 21
	'bool'         shift, and enter state 22
	'char'         shift, and enter state 23
	'dec'          shift, and enter state 24
	'exit'         shift, and enter state 25
	'false'        shift, and enter state 26
	'from'         shift, and enter state 27
	'fun'          shift, and enter state 28
	'if'           shift, and enter state 29
	'immutable'    shift, and enter state 30
	'inc'          shift, and enter state 31
	'int'          shift, and enter state 32
	'not'          shift, and enter state 33
	'print'        shift, and enter state 34
	'return'       shift, and enter state 35
	'skip'         shift, and enter state 36
	'string'       shift, and enter state 37
	'true'         shift, and enter state 38
	'void'         shift, and enter state 39
	'while'        shift, and enter state 40
	'{'            shift, and enter state 41
	'}'            reduce using rule 7
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 3
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Block          goto state 8
	ListStmt       goto state 45
	Stmt           goto state 10
	Type           goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 18

State 42

	Char -> L_charac .                                  (rule 2)

	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'/'            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'and'          reduce using rule 2
	'do'           reduce using rule 2
	'is'           reduce using rule 2
	'mod'          reduce using rule 2
	'or'           reduce using rule 2
	'to'           reduce using rule 2


State 43

	Integer -> L_integ .                                (rule 3)

	')'            reduce using rule 3
	'*'            reduce using rule 3
	'+'            reduce using rule 3
	','            reduce using rule 3
	'-'            reduce using rule 3
	'/'            reduce using rule 3
	';'            reduce using rule 3
	'<'            reduce using rule 3
	'<='           reduce using rule 3
	'>'            reduce using rule 3
	'>='           reduce using rule 3
	'and'          reduce using rule 3
	'do'           reduce using rule 3
	'is'           reduce using rule 3
	'mod'          reduce using rule 3
	'or'           reduce using rule 3
	'to'           reduce using rule 3


State 44

	String -> L_quoted .                                (rule 4)

	')'            reduce using rule 4
	'*'            reduce using rule 4
	'+'            reduce using rule 4
	','            reduce using rule 4
	'-'            reduce using rule 4
	'/'            reduce using rule 4
	';'            reduce using rule 4
	'<'            reduce using rule 4
	'<='           reduce using rule 4
	'>'            reduce using rule 4
	'>='           reduce using rule 4
	'and'          reduce using rule 4
	'do'           reduce using rule 4
	'is'           reduce using rule 4
	'mod'          reduce using rule 4
	'or'           reduce using rule 4
	'to'           reduce using rule 4


State 45

	Block -> '{' ListStmt . '}'                         (rule 6)

	'}'            shift, and enter state 114


State 46

	Stmt -> 'while' '(' . Expr ')' Stmt                 (rule 20)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	'false'        shift, and enter state 26
	'not'          shift, and enter state 33
	'true'         shift, and enter state 38
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 113

State 47

	Stmt -> 'skip' ';' .                                (rule 24)

	'('            reduce using rule 24
	'-'            reduce using rule 24
	';'            reduce using rule 24
	'bool'         reduce using rule 24
	'char'         reduce using rule 24
	'dec'          reduce using rule 24
	'exit'         reduce using rule 24
	'false'        reduce using rule 24
	'from'         reduce using rule 24
	'fun'          reduce using rule 24
	'if'           reduce using rule 24
	'immutable'    reduce using rule 24
	'inc'          reduce using rule 24
	'int'          reduce using rule 24
	'not'          reduce using rule 24
	'print'        reduce using rule 24
	'return'       reduce using rule 24
	'skip'         reduce using rule 24
	'string'       reduce using rule 24
	'true'         reduce using rule 24
	'void'         reduce using rule 24
	'while'        reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	L_Ident        reduce using rule 24
	L_charac       reduce using rule 24
	L_integ        reduce using rule 24
	L_quoted       reduce using rule 24
	%eof           reduce using rule 24


State 48

	Expr6 -> Ident .                                    (rule 43)
	Expr6 -> Ident . '(' ListExpr ')'                   (rule 50)

	'('            shift, and enter state 86
	')'            reduce using rule 43
	'*'            reduce using rule 43
	'+'            reduce using rule 43
	','            reduce using rule 43
	'-'            reduce using rule 43
	'/'            reduce using rule 43
	';'            reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'>'            reduce using rule 43
	'>='           reduce using rule 43
	'and'          reduce using rule 43
	'do'           reduce using rule 43
	'is'           reduce using rule 43
	'mod'          reduce using rule 43
	'or'           reduce using rule 43
	'to'           reduce using rule 43


State 49

	Stmt -> 'return' Expr . ';'                         (rule 16)

	';'            shift, and enter state 112


State 50

	Stmt -> 'return' ';' .                              (rule 17)

	'('            reduce using rule 17
	'-'            reduce using rule 17
	';'            reduce using rule 17
	'bool'         reduce using rule 17
	'char'         reduce using rule 17
	'dec'          reduce using rule 17
	'exit'         reduce using rule 17
	'false'        reduce using rule 17
	'from'         reduce using rule 17
	'fun'          reduce using rule 17
	'if'           reduce using rule 17
	'immutable'    reduce using rule 17
	'inc'          reduce using rule 17
	'int'          reduce using rule 17
	'not'          reduce using rule 17
	'print'        reduce using rule 17
	'return'       reduce using rule 17
	'skip'         reduce using rule 17
	'string'       reduce using rule 17
	'true'         reduce using rule 17
	'void'         reduce using rule 17
	'while'        reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	L_Ident        reduce using rule 17
	L_charac       reduce using rule 17
	L_integ        reduce using rule 17
	L_quoted       reduce using rule 17
	%eof           reduce using rule 17


State 51

	Stmt -> 'print' Expr . ';'                          (rule 22)

	';'            shift, and enter state 111


State 52

	Expr5 -> 'not' Expr6 .                              (rule 53)

	')'            reduce using rule 53
	'*'            reduce using rule 53
	'+'            reduce using rule 53
	','            reduce using rule 53
	'-'            reduce using rule 53
	'/'            reduce using rule 53
	';'            reduce using rule 53
	'<'            reduce using rule 53
	'<='           reduce using rule 53
	'>'            reduce using rule 53
	'>='           reduce using rule 53
	'and'          reduce using rule 53
	'do'           reduce using rule 53
	'is'           reduce using rule 53
	'mod'          reduce using rule 53
	'or'           reduce using rule 53
	'to'           reduce using rule 53


State 53

	Stmt -> 'inc' Ident . ';'                           (rule 14)

	';'            shift, and enter state 110


State 54

	Stmt -> 'immutable' Type . Item ';'                 (rule 12)

	L_Ident        shift, and enter state 2

	Ident          goto state 83
	Item           goto state 109

State 55

	Stmt -> 'if' '(' . Expr ')' Stmt                    (rule 18)
	Stmt -> 'if' '(' . Expr ')' Block 'else' Block      (rule 19)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	'false'        shift, and enter state 26
	'not'          shift, and enter state 33
	'true'         shift, and enter state 38
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 108

State 56

	Type -> 'fun' '[' . ListArgType '->' Type ']'       (rule 33)

	'->'           reduce using rule 36
	'bool'         shift, and enter state 22
	'char'         shift, and enter state 23
	'fun'          shift, and enter state 28
	'int'          shift, and enter state 32
	'ref'          shift, and enter state 66
	'string'       shift, and enter state 37
	'void'         shift, and enter state 39

	Type           goto state 61
	ArgType        goto state 106
	ListArgType    goto state 107

State 57

	Stmt -> 'from' Ident . '=' Expr 'to' Expr 'do' Stmt    (rule 21)

	'='            shift, and enter state 105


State 58

	Stmt -> 'exit' ';' .                                (rule 23)

	'('            reduce using rule 23
	'-'            reduce using rule 23
	';'            reduce using rule 23
	'bool'         reduce using rule 23
	'char'         reduce using rule 23
	'dec'          reduce using rule 23
	'exit'         reduce using rule 23
	'false'        reduce using rule 23
	'from'         reduce using rule 23
	'fun'          reduce using rule 23
	'if'           reduce using rule 23
	'immutable'    reduce using rule 23
	'inc'          reduce using rule 23
	'int'          reduce using rule 23
	'not'          reduce using rule 23
	'print'        reduce using rule 23
	'return'       reduce using rule 23
	'skip'         reduce using rule 23
	'string'       reduce using rule 23
	'true'         reduce using rule 23
	'void'         reduce using rule 23
	'while'        reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	L_Ident        reduce using rule 23
	L_charac       reduce using rule 23
	L_integ        reduce using rule 23
	L_quoted       reduce using rule 23
	%eof           reduce using rule 23


State 59

	Stmt -> 'dec' Ident . ';'                           (rule 15)

	';'            shift, and enter state 104


State 60

	Expr5 -> '-' Expr6 .                                (rule 52)

	')'            reduce using rule 52
	'*'            reduce using rule 52
	'+'            reduce using rule 52
	','            reduce using rule 52
	'-'            reduce using rule 52
	'/'            reduce using rule 52
	';'            reduce using rule 52
	'<'            reduce using rule 52
	'<='           reduce using rule 52
	'>'            reduce using rule 52
	'>='           reduce using rule 52
	'and'          reduce using rule 52
	'do'           reduce using rule 52
	'is'           reduce using rule 52
	'mod'          reduce using rule 52
	'or'           reduce using rule 52
	'to'           reduce using rule 52


State 61

	ArgType -> Type .                                   (rule 34)

	','            reduce using rule 34
	'->'           reduce using rule 34
	L_Ident        reduce using rule 34


State 62

	Arg -> ArgType . Ident                              (rule 39)

	L_Ident        shift, and enter state 2

	Ident          goto state 103

State 63

	ListArg -> Arg .                                    (rule 41)
	ListArg -> Arg . ',' ListArg                        (rule 42)

	')'            reduce using rule 41
	','            shift, and enter state 102


State 64

	Expr6 -> '(' ListArg . ')' '->' Type Block          (rule 49)

	')'            shift, and enter state 101


State 65

	Expr6 -> '(' Expr . ')'                             (rule 51)

	')'            shift, and enter state 100


State 66

	ArgType -> 'ref' . Type                             (rule 35)

	'bool'         shift, and enter state 22
	'char'         shift, and enter state 23
	'fun'          shift, and enter state 28
	'int'          shift, and enter state 32
	'string'       shift, and enter state 37
	'void'         shift, and enter state 39

	Type           goto state 99

State 67

	Stmt -> Expr ';' .                                  (rule 25)

	'('            reduce using rule 25
	'-'            reduce using rule 25
	';'            reduce using rule 25
	'bool'         reduce using rule 25
	'char'         reduce using rule 25
	'dec'          reduce using rule 25
	'exit'         reduce using rule 25
	'false'        reduce using rule 25
	'from'         reduce using rule 25
	'fun'          reduce using rule 25
	'if'           reduce using rule 25
	'immutable'    reduce using rule 25
	'inc'          reduce using rule 25
	'int'          reduce using rule 25
	'not'          reduce using rule 25
	'print'        reduce using rule 25
	'return'       reduce using rule 25
	'skip'         reduce using rule 25
	'string'       reduce using rule 25
	'true'         reduce using rule 25
	'void'         reduce using rule 25
	'while'        reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	L_Ident        reduce using rule 25
	L_charac       reduce using rule 25
	L_integ        reduce using rule 25
	L_quoted       reduce using rule 25
	%eof           reduce using rule 25


State 68

	Expr -> Expr1 'or' . Expr                           (rule 63)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	'false'        shift, and enter state 26
	'not'          shift, and enter state 33
	'true'         shift, and enter state 38
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 98

State 69

	Expr2 -> Expr2 RelOp . Expr3                        (rule 59)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	'false'        shift, and enter state 26
	'not'          shift, and enter state 33
	'true'         shift, and enter state 38
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 97

State 70

	RelOp -> '<' .                                      (rule 73)

	'('            reduce using rule 73
	'-'            reduce using rule 73
	'false'        reduce using rule 73
	'not'          reduce using rule 73
	'true'         reduce using rule 73
	L_Ident        reduce using rule 73
	L_charac       reduce using rule 73
	L_integ        reduce using rule 73
	L_quoted       reduce using rule 73


State 71

	RelOp -> '<=' .                                     (rule 74)

	'('            reduce using rule 74
	'-'            reduce using rule 74
	'false'        reduce using rule 74
	'not'          reduce using rule 74
	'true'         reduce using rule 74
	L_Ident        reduce using rule 74
	L_charac       reduce using rule 74
	L_integ        reduce using rule 74
	L_quoted       reduce using rule 74


State 72

	RelOp -> '>' .                                      (rule 75)

	'('            reduce using rule 75
	'-'            reduce using rule 75
	'false'        reduce using rule 75
	'not'          reduce using rule 75
	'true'         reduce using rule 75
	L_Ident        reduce using rule 75
	L_charac       reduce using rule 75
	L_integ        reduce using rule 75
	L_quoted       reduce using rule 75


State 73

	RelOp -> '>=' .                                     (rule 76)

	'('            reduce using rule 76
	'-'            reduce using rule 76
	'false'        reduce using rule 76
	'not'          reduce using rule 76
	'true'         reduce using rule 76
	L_Ident        reduce using rule 76
	L_charac       reduce using rule 76
	L_integ        reduce using rule 76
	L_quoted       reduce using rule 76


State 74

	Expr1 -> Expr2 'and' . Expr1                        (rule 61)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	'false'        shift, and enter state 26
	'not'          shift, and enter state 33
	'true'         shift, and enter state 38
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 96

State 75

	RelOp -> 'is' .                                     (rule 77)
	RelOp -> 'is' . 'not'                               (rule 78)

	'('            reduce using rule 77
	'-'            reduce using rule 77
	'false'        reduce using rule 77
	'not'          shift, and enter state 95
			(reduce using rule 77)

	'true'         reduce using rule 77
	L_Ident        reduce using rule 77
	L_charac       reduce using rule 77
	L_integ        reduce using rule 77
	L_quoted       reduce using rule 77


State 76

	Expr3 -> Expr3 AddOp . Expr4                        (rule 57)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	'false'        shift, and enter state 26
	'not'          shift, and enter state 33
	'true'         shift, and enter state 38
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 94

State 77

	AddOp -> '+' .                                      (rule 68)

	'('            reduce using rule 68
	'-'            reduce using rule 68
	'false'        reduce using rule 68
	'not'          reduce using rule 68
	'true'         reduce using rule 68
	L_Ident        reduce using rule 68
	L_charac       reduce using rule 68
	L_integ        reduce using rule 68
	L_quoted       reduce using rule 68


State 78

	AddOp -> '-' .                                      (rule 69)

	'('            reduce using rule 69
	'-'            reduce using rule 69
	'false'        reduce using rule 69
	'not'          reduce using rule 69
	'true'         reduce using rule 69
	L_Ident        reduce using rule 69
	L_charac       reduce using rule 69
	L_integ        reduce using rule 69
	L_quoted       reduce using rule 69


State 79

	Expr4 -> Expr4 MulOp . Expr5                        (rule 55)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	'false'        shift, and enter state 26
	'not'          shift, and enter state 33
	'true'         shift, and enter state 38
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Expr6          goto state 12
	Expr5          goto state 93

State 80

	MulOp -> '*' .                                      (rule 70)

	'('            reduce using rule 70
	'-'            reduce using rule 70
	'false'        reduce using rule 70
	'not'          reduce using rule 70
	'true'         reduce using rule 70
	L_Ident        reduce using rule 70
	L_charac       reduce using rule 70
	L_integ        reduce using rule 70
	L_quoted       reduce using rule 70


State 81

	MulOp -> '/' .                                      (rule 71)

	'('            reduce using rule 71
	'-'            reduce using rule 71
	'false'        reduce using rule 71
	'not'          reduce using rule 71
	'true'         reduce using rule 71
	L_Ident        reduce using rule 71
	L_charac       reduce using rule 71
	L_integ        reduce using rule 71
	L_quoted       reduce using rule 71


State 82

	MulOp -> 'mod' .                                    (rule 72)

	'('            reduce using rule 72
	'-'            reduce using rule 72
	'false'        reduce using rule 72
	'not'          reduce using rule 72
	'true'         reduce using rule 72
	L_Ident        reduce using rule 72
	L_charac       reduce using rule 72
	L_integ        reduce using rule 72
	L_quoted       reduce using rule 72


State 83

	Item -> Ident .                                     (rule 26)
	Item -> Ident . '=' Expr                            (rule 27)

	';'            reduce using rule 26
	'='            shift, and enter state 92


State 84

	Stmt -> Type Item . ';'                             (rule 11)

	';'            shift, and enter state 91


State 85

	ListStmt -> Stmt ListStmt .                         (rule 8)

	'}'            reduce using rule 8
	%eof           reduce using rule 8


State 86

	Expr6 -> Ident '(' . ListExpr ')'                   (rule 50)

	'('            shift, and enter state 19
	')'            reduce using rule 65
	'-'            shift, and enter state 20
	'false'        shift, and enter state 26
	'not'          shift, and enter state 33
	'true'         shift, and enter state 38
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 89
	ListExpr       goto state 90

State 87

	Stmt -> Ident '=' . Expr ';'                        (rule 13)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	'false'        shift, and enter state 26
	'not'          shift, and enter state 33
	'true'         shift, and enter state 38
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 88

State 88

	Stmt -> Ident '=' Expr . ';'                        (rule 13)

	';'            shift, and enter state 126


State 89

	ListExpr -> Expr .                                  (rule 66)
	ListExpr -> Expr . ',' ListExpr                     (rule 67)

	')'            reduce using rule 66
	','            shift, and enter state 125


State 90

	Expr6 -> Ident '(' ListExpr . ')'                   (rule 50)

	')'            shift, and enter state 124


State 91

	Stmt -> Type Item ';' .                             (rule 11)

	'('            reduce using rule 11
	'-'            reduce using rule 11
	';'            reduce using rule 11
	'bool'         reduce using rule 11
	'char'         reduce using rule 11
	'dec'          reduce using rule 11
	'exit'         reduce using rule 11
	'false'        reduce using rule 11
	'from'         reduce using rule 11
	'fun'          reduce using rule 11
	'if'           reduce using rule 11
	'immutable'    reduce using rule 11
	'inc'          reduce using rule 11
	'int'          reduce using rule 11
	'not'          reduce using rule 11
	'print'        reduce using rule 11
	'return'       reduce using rule 11
	'skip'         reduce using rule 11
	'string'       reduce using rule 11
	'true'         reduce using rule 11
	'void'         reduce using rule 11
	'while'        reduce using rule 11
	'{'            reduce using rule 11
	'}'            reduce using rule 11
	L_Ident        reduce using rule 11
	L_charac       reduce using rule 11
	L_integ        reduce using rule 11
	L_quoted       reduce using rule 11
	%eof           reduce using rule 11


State 92

	Item -> Ident '=' . Expr                            (rule 27)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	'false'        shift, and enter state 26
	'not'          shift, and enter state 33
	'true'         shift, and enter state 38
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 123

State 93

	Expr4 -> Expr4 MulOp Expr5 .                        (rule 55)

	')'            reduce using rule 55
	'*'            reduce using rule 55
	'+'            reduce using rule 55
	','            reduce using rule 55
	'-'            reduce using rule 55
	'/'            reduce using rule 55
	';'            reduce using rule 55
	'<'            reduce using rule 55
	'<='           reduce using rule 55
	'>'            reduce using rule 55
	'>='           reduce using rule 55
	'and'          reduce using rule 55
	'do'           reduce using rule 55
	'is'           reduce using rule 55
	'mod'          reduce using rule 55
	'or'           reduce using rule 55
	'to'           reduce using rule 55


State 94

	Expr4 -> Expr4 . MulOp Expr5                        (rule 55)
	Expr3 -> Expr3 AddOp Expr4 .                        (rule 57)

	')'            reduce using rule 57
	'*'            shift, and enter state 80
	'+'            reduce using rule 57
	','            reduce using rule 57
	'-'            reduce using rule 57
	'/'            shift, and enter state 81
	';'            reduce using rule 57
	'<'            reduce using rule 57
	'<='           reduce using rule 57
	'>'            reduce using rule 57
	'>='           reduce using rule 57
	'and'          reduce using rule 57
	'do'           reduce using rule 57
	'is'           reduce using rule 57
	'mod'          shift, and enter state 82
	'or'           reduce using rule 57
	'to'           reduce using rule 57

	MulOp          goto state 79

State 95

	RelOp -> 'is' 'not' .                               (rule 78)

	'('            reduce using rule 78
	'-'            reduce using rule 78
	'false'        reduce using rule 78
	'not'          reduce using rule 78
	'true'         reduce using rule 78
	L_Ident        reduce using rule 78
	L_charac       reduce using rule 78
	L_integ        reduce using rule 78
	L_quoted       reduce using rule 78


State 96

	Expr1 -> Expr2 'and' Expr1 .                        (rule 61)

	')'            reduce using rule 61
	','            reduce using rule 61
	';'            reduce using rule 61
	'do'           reduce using rule 61
	'or'           reduce using rule 61
	'to'           reduce using rule 61


State 97

	Expr3 -> Expr3 . AddOp Expr4                        (rule 57)
	Expr2 -> Expr2 RelOp Expr3 .                        (rule 59)

	')'            reduce using rule 59
	'+'            shift, and enter state 77
	','            reduce using rule 59
	'-'            shift, and enter state 78
	';'            reduce using rule 59
	'<'            reduce using rule 59
	'<='           reduce using rule 59
	'>'            reduce using rule 59
	'>='           reduce using rule 59
	'and'          reduce using rule 59
	'do'           reduce using rule 59
	'is'           reduce using rule 59
	'or'           reduce using rule 59
	'to'           reduce using rule 59

	AddOp          goto state 76

State 98

	Expr -> Expr1 'or' Expr .                           (rule 63)

	')'            reduce using rule 63
	','            reduce using rule 63
	';'            reduce using rule 63
	'do'           reduce using rule 63
	'to'           reduce using rule 63


State 99

	ArgType -> 'ref' Type .                             (rule 35)

	','            reduce using rule 35
	'->'           reduce using rule 35
	L_Ident        reduce using rule 35


State 100

	Expr6 -> '(' Expr ')' .                             (rule 51)

	')'            reduce using rule 51
	'*'            reduce using rule 51
	'+'            reduce using rule 51
	','            reduce using rule 51
	'-'            reduce using rule 51
	'/'            reduce using rule 51
	';'            reduce using rule 51
	'<'            reduce using rule 51
	'<='           reduce using rule 51
	'>'            reduce using rule 51
	'>='           reduce using rule 51
	'and'          reduce using rule 51
	'do'           reduce using rule 51
	'is'           reduce using rule 51
	'mod'          reduce using rule 51
	'or'           reduce using rule 51
	'to'           reduce using rule 51


State 101

	Expr6 -> '(' ListArg ')' . '->' Type Block          (rule 49)

	'->'           shift, and enter state 122


State 102

	ListArg -> Arg ',' . ListArg                        (rule 42)

	')'            reduce using rule 40
	'bool'         shift, and enter state 22
	'char'         shift, and enter state 23
	'fun'          shift, and enter state 28
	'int'          shift, and enter state 32
	'ref'          shift, and enter state 66
	'string'       shift, and enter state 37
	'void'         shift, and enter state 39

	Type           goto state 61
	ArgType        goto state 62
	Arg            goto state 63
	ListArg        goto state 121

State 103

	Arg -> ArgType Ident .                              (rule 39)

	')'            reduce using rule 39
	','            reduce using rule 39


State 104

	Stmt -> 'dec' Ident ';' .                           (rule 15)

	'('            reduce using rule 15
	'-'            reduce using rule 15
	';'            reduce using rule 15
	'bool'         reduce using rule 15
	'char'         reduce using rule 15
	'dec'          reduce using rule 15
	'exit'         reduce using rule 15
	'false'        reduce using rule 15
	'from'         reduce using rule 15
	'fun'          reduce using rule 15
	'if'           reduce using rule 15
	'immutable'    reduce using rule 15
	'inc'          reduce using rule 15
	'int'          reduce using rule 15
	'not'          reduce using rule 15
	'print'        reduce using rule 15
	'return'       reduce using rule 15
	'skip'         reduce using rule 15
	'string'       reduce using rule 15
	'true'         reduce using rule 15
	'void'         reduce using rule 15
	'while'        reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15
	L_Ident        reduce using rule 15
	L_charac       reduce using rule 15
	L_integ        reduce using rule 15
	L_quoted       reduce using rule 15
	%eof           reduce using rule 15


State 105

	Stmt -> 'from' Ident '=' . Expr 'to' Expr 'do' Stmt    (rule 21)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	'false'        shift, and enter state 26
	'not'          shift, and enter state 33
	'true'         shift, and enter state 38
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 120

State 106

	ListArgType -> ArgType .                            (rule 37)
	ListArgType -> ArgType . ',' ListArgType            (rule 38)

	','            shift, and enter state 119
	'->'           reduce using rule 37


State 107

	Type -> 'fun' '[' ListArgType . '->' Type ']'       (rule 33)

	'->'           shift, and enter state 118


State 108

	Stmt -> 'if' '(' Expr . ')' Stmt                    (rule 18)
	Stmt -> 'if' '(' Expr . ')' Block 'else' Block      (rule 19)

	')'            shift, and enter state 117


State 109

	Stmt -> 'immutable' Type Item . ';'                 (rule 12)

	';'            shift, and enter state 116


State 110

	Stmt -> 'inc' Ident ';' .                           (rule 14)

	'('            reduce using rule 14
	'-'            reduce using rule 14
	';'            reduce using rule 14
	'bool'         reduce using rule 14
	'char'         reduce using rule 14
	'dec'          reduce using rule 14
	'exit'         reduce using rule 14
	'false'        reduce using rule 14
	'from'         reduce using rule 14
	'fun'          reduce using rule 14
	'if'           reduce using rule 14
	'immutable'    reduce using rule 14
	'inc'          reduce using rule 14
	'int'          reduce using rule 14
	'not'          reduce using rule 14
	'print'        reduce using rule 14
	'return'       reduce using rule 14
	'skip'         reduce using rule 14
	'string'       reduce using rule 14
	'true'         reduce using rule 14
	'void'         reduce using rule 14
	'while'        reduce using rule 14
	'{'            reduce using rule 14
	'}'            reduce using rule 14
	L_Ident        reduce using rule 14
	L_charac       reduce using rule 14
	L_integ        reduce using rule 14
	L_quoted       reduce using rule 14
	%eof           reduce using rule 14


State 111

	Stmt -> 'print' Expr ';' .                          (rule 22)

	'('            reduce using rule 22
	'-'            reduce using rule 22
	';'            reduce using rule 22
	'bool'         reduce using rule 22
	'char'         reduce using rule 22
	'dec'          reduce using rule 22
	'exit'         reduce using rule 22
	'false'        reduce using rule 22
	'from'         reduce using rule 22
	'fun'          reduce using rule 22
	'if'           reduce using rule 22
	'immutable'    reduce using rule 22
	'inc'          reduce using rule 22
	'int'          reduce using rule 22
	'not'          reduce using rule 22
	'print'        reduce using rule 22
	'return'       reduce using rule 22
	'skip'         reduce using rule 22
	'string'       reduce using rule 22
	'true'         reduce using rule 22
	'void'         reduce using rule 22
	'while'        reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	L_Ident        reduce using rule 22
	L_charac       reduce using rule 22
	L_integ        reduce using rule 22
	L_quoted       reduce using rule 22
	%eof           reduce using rule 22


State 112

	Stmt -> 'return' Expr ';' .                         (rule 16)

	'('            reduce using rule 16
	'-'            reduce using rule 16
	';'            reduce using rule 16
	'bool'         reduce using rule 16
	'char'         reduce using rule 16
	'dec'          reduce using rule 16
	'exit'         reduce using rule 16
	'false'        reduce using rule 16
	'from'         reduce using rule 16
	'fun'          reduce using rule 16
	'if'           reduce using rule 16
	'immutable'    reduce using rule 16
	'inc'          reduce using rule 16
	'int'          reduce using rule 16
	'not'          reduce using rule 16
	'print'        reduce using rule 16
	'return'       reduce using rule 16
	'skip'         reduce using rule 16
	'string'       reduce using rule 16
	'true'         reduce using rule 16
	'void'         reduce using rule 16
	'while'        reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	L_Ident        reduce using rule 16
	L_charac       reduce using rule 16
	L_integ        reduce using rule 16
	L_quoted       reduce using rule 16
	%eof           reduce using rule 16


State 113

	Stmt -> 'while' '(' Expr . ')' Stmt                 (rule 20)

	')'            shift, and enter state 115


State 114

	Block -> '{' ListStmt '}' .                         (rule 6)

	'('            reduce using rule 6
	')'            reduce using rule 6
	'*'            reduce using rule 6
	'+'            reduce using rule 6
	','            reduce using rule 6
	'-'            reduce using rule 6
	'/'            reduce using rule 6
	';'            reduce using rule 6
	'<'            reduce using rule 6
	'<='           reduce using rule 6
	'>'            reduce using rule 6
	'>='           reduce using rule 6
	'and'          reduce using rule 6
	'bool'         reduce using rule 6
	'char'         reduce using rule 6
	'dec'          reduce using rule 6
	'do'           reduce using rule 6
	'else'         reduce using rule 6
	'exit'         reduce using rule 6
	'false'        reduce using rule 6
	'from'         reduce using rule 6
	'fun'          reduce using rule 6
	'if'           reduce using rule 6
	'immutable'    reduce using rule 6
	'inc'          reduce using rule 6
	'int'          reduce using rule 6
	'is'           reduce using rule 6
	'mod'          reduce using rule 6
	'not'          reduce using rule 6
	'or'           reduce using rule 6
	'print'        reduce using rule 6
	'return'       reduce using rule 6
	'skip'         reduce using rule 6
	'string'       reduce using rule 6
	'to'           reduce using rule 6
	'true'         reduce using rule 6
	'void'         reduce using rule 6
	'while'        reduce using rule 6
	'{'            reduce using rule 6
	'}'            reduce using rule 6
	L_Ident        reduce using rule 6
	L_charac       reduce using rule 6
	L_integ        reduce using rule 6
	L_quoted       reduce using rule 6
	%eof           reduce using rule 6


State 115

	Stmt -> 'while' '(' Expr ')' . Stmt                 (rule 20)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	';'            shift, and enter state 21
	'bool'         shift, and enter state 22
	'char'         shift, and enter state 23
	'dec'          shift, and enter state 24
	'exit'         shift, and enter state 25
	'false'        shift, and enter state 26
	'from'         shift, and enter state 27
	'fun'          shift, and enter state 28
	'if'           shift, and enter state 29
	'immutable'    shift, and enter state 30
	'inc'          shift, and enter state 31
	'int'          shift, and enter state 32
	'not'          shift, and enter state 33
	'print'        shift, and enter state 34
	'return'       shift, and enter state 35
	'skip'         shift, and enter state 36
	'string'       shift, and enter state 37
	'true'         shift, and enter state 38
	'void'         shift, and enter state 39
	'while'        shift, and enter state 40
	'{'            shift, and enter state 41
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 3
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Block          goto state 8
	Stmt           goto state 134
	Type           goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 18

State 116

	Stmt -> 'immutable' Type Item ';' .                 (rule 12)

	'('            reduce using rule 12
	'-'            reduce using rule 12
	';'            reduce using rule 12
	'bool'         reduce using rule 12
	'char'         reduce using rule 12
	'dec'          reduce using rule 12
	'exit'         reduce using rule 12
	'false'        reduce using rule 12
	'from'         reduce using rule 12
	'fun'          reduce using rule 12
	'if'           reduce using rule 12
	'immutable'    reduce using rule 12
	'inc'          reduce using rule 12
	'int'          reduce using rule 12
	'not'          reduce using rule 12
	'print'        reduce using rule 12
	'return'       reduce using rule 12
	'skip'         reduce using rule 12
	'string'       reduce using rule 12
	'true'         reduce using rule 12
	'void'         reduce using rule 12
	'while'        reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	L_Ident        reduce using rule 12
	L_charac       reduce using rule 12
	L_integ        reduce using rule 12
	L_quoted       reduce using rule 12
	%eof           reduce using rule 12


State 117

	Stmt -> 'if' '(' Expr ')' . Stmt                    (rule 18)
	Stmt -> 'if' '(' Expr ')' . Block 'else' Block      (rule 19)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	';'            shift, and enter state 21
	'bool'         shift, and enter state 22
	'char'         shift, and enter state 23
	'dec'          shift, and enter state 24
	'exit'         shift, and enter state 25
	'false'        shift, and enter state 26
	'from'         shift, and enter state 27
	'fun'          shift, and enter state 28
	'if'           shift, and enter state 29
	'immutable'    shift, and enter state 30
	'inc'          shift, and enter state 31
	'int'          shift, and enter state 32
	'not'          shift, and enter state 33
	'print'        shift, and enter state 34
	'return'       shift, and enter state 35
	'skip'         shift, and enter state 36
	'string'       shift, and enter state 37
	'true'         shift, and enter state 38
	'void'         shift, and enter state 39
	'while'        shift, and enter state 40
	'{'            shift, and enter state 41
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 3
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Block          goto state 132
	Stmt           goto state 133
	Type           goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 18

State 118

	Type -> 'fun' '[' ListArgType '->' . Type ']'       (rule 33)

	'bool'         shift, and enter state 22
	'char'         shift, and enter state 23
	'fun'          shift, and enter state 28
	'int'          shift, and enter state 32
	'string'       shift, and enter state 37
	'void'         shift, and enter state 39

	Type           goto state 131

State 119

	ListArgType -> ArgType ',' . ListArgType            (rule 38)

	'->'           reduce using rule 36
	'bool'         shift, and enter state 22
	'char'         shift, and enter state 23
	'fun'          shift, and enter state 28
	'int'          shift, and enter state 32
	'ref'          shift, and enter state 66
	'string'       shift, and enter state 37
	'void'         shift, and enter state 39

	Type           goto state 61
	ArgType        goto state 106
	ListArgType    goto state 130

State 120

	Stmt -> 'from' Ident '=' Expr . 'to' Expr 'do' Stmt    (rule 21)

	'to'           shift, and enter state 129


State 121

	ListArg -> Arg ',' ListArg .                        (rule 42)

	')'            reduce using rule 42


State 122

	Expr6 -> '(' ListArg ')' '->' . Type Block          (rule 49)

	'bool'         shift, and enter state 22
	'char'         shift, and enter state 23
	'fun'          shift, and enter state 28
	'int'          shift, and enter state 32
	'string'       shift, and enter state 37
	'void'         shift, and enter state 39

	Type           goto state 128

State 123

	Item -> Ident '=' Expr .                            (rule 27)

	';'            reduce using rule 27


State 124

	Expr6 -> Ident '(' ListExpr ')' .                   (rule 50)

	')'            reduce using rule 50
	'*'            reduce using rule 50
	'+'            reduce using rule 50
	','            reduce using rule 50
	'-'            reduce using rule 50
	'/'            reduce using rule 50
	';'            reduce using rule 50
	'<'            reduce using rule 50
	'<='           reduce using rule 50
	'>'            reduce using rule 50
	'>='           reduce using rule 50
	'and'          reduce using rule 50
	'do'           reduce using rule 50
	'is'           reduce using rule 50
	'mod'          reduce using rule 50
	'or'           reduce using rule 50
	'to'           reduce using rule 50


State 125

	ListExpr -> Expr ',' . ListExpr                     (rule 67)

	'('            shift, and enter state 19
	')'            reduce using rule 65
	'-'            shift, and enter state 20
	'false'        shift, and enter state 26
	'not'          shift, and enter state 33
	'true'         shift, and enter state 38
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 89
	ListExpr       goto state 127

State 126

	Stmt -> Ident '=' Expr ';' .                        (rule 13)

	'('            reduce using rule 13
	'-'            reduce using rule 13
	';'            reduce using rule 13
	'bool'         reduce using rule 13
	'char'         reduce using rule 13
	'dec'          reduce using rule 13
	'exit'         reduce using rule 13
	'false'        reduce using rule 13
	'from'         reduce using rule 13
	'fun'          reduce using rule 13
	'if'           reduce using rule 13
	'immutable'    reduce using rule 13
	'inc'          reduce using rule 13
	'int'          reduce using rule 13
	'not'          reduce using rule 13
	'print'        reduce using rule 13
	'return'       reduce using rule 13
	'skip'         reduce using rule 13
	'string'       reduce using rule 13
	'true'         reduce using rule 13
	'void'         reduce using rule 13
	'while'        reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13
	L_Ident        reduce using rule 13
	L_charac       reduce using rule 13
	L_integ        reduce using rule 13
	L_quoted       reduce using rule 13
	%eof           reduce using rule 13


State 127

	ListExpr -> Expr ',' ListExpr .                     (rule 67)

	')'            reduce using rule 67


State 128

	Expr6 -> '(' ListArg ')' '->' Type . Block          (rule 49)

	'{'            shift, and enter state 41

	Block          goto state 138

State 129

	Stmt -> 'from' Ident '=' Expr 'to' . Expr 'do' Stmt    (rule 21)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	'false'        shift, and enter state 26
	'not'          shift, and enter state 33
	'true'         shift, and enter state 38
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 48
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 137

State 130

	ListArgType -> ArgType ',' ListArgType .            (rule 38)

	'->'           reduce using rule 38


State 131

	Type -> 'fun' '[' ListArgType '->' Type . ']'       (rule 33)

	']'            shift, and enter state 136


State 132

	Stmt -> Block .                                     (rule 10)
	Stmt -> 'if' '(' Expr ')' Block . 'else' Block      (rule 19)

	'('            reduce using rule 10
	'-'            reduce using rule 10
	';'            reduce using rule 10
	'bool'         reduce using rule 10
	'char'         reduce using rule 10
	'dec'          reduce using rule 10
	'else'         shift, and enter state 135
	'exit'         reduce using rule 10
	'false'        reduce using rule 10
	'from'         reduce using rule 10
	'fun'          reduce using rule 10
	'if'           reduce using rule 10
	'immutable'    reduce using rule 10
	'inc'          reduce using rule 10
	'int'          reduce using rule 10
	'not'          reduce using rule 10
	'print'        reduce using rule 10
	'return'       reduce using rule 10
	'skip'         reduce using rule 10
	'string'       reduce using rule 10
	'true'         reduce using rule 10
	'void'         reduce using rule 10
	'while'        reduce using rule 10
	'{'            reduce using rule 10
	'}'            reduce using rule 10
	L_Ident        reduce using rule 10
	L_charac       reduce using rule 10
	L_integ        reduce using rule 10
	L_quoted       reduce using rule 10
	%eof           reduce using rule 10


State 133

	Stmt -> 'if' '(' Expr ')' Stmt .                    (rule 18)

	'('            reduce using rule 18
	'-'            reduce using rule 18
	';'            reduce using rule 18
	'bool'         reduce using rule 18
	'char'         reduce using rule 18
	'dec'          reduce using rule 18
	'exit'         reduce using rule 18
	'false'        reduce using rule 18
	'from'         reduce using rule 18
	'fun'          reduce using rule 18
	'if'           reduce using rule 18
	'immutable'    reduce using rule 18
	'inc'          reduce using rule 18
	'int'          reduce using rule 18
	'not'          reduce using rule 18
	'print'        reduce using rule 18
	'return'       reduce using rule 18
	'skip'         reduce using rule 18
	'string'       reduce using rule 18
	'true'         reduce using rule 18
	'void'         reduce using rule 18
	'while'        reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	L_Ident        reduce using rule 18
	L_charac       reduce using rule 18
	L_integ        reduce using rule 18
	L_quoted       reduce using rule 18
	%eof           reduce using rule 18


State 134

	Stmt -> 'while' '(' Expr ')' Stmt .                 (rule 20)

	'('            reduce using rule 20
	'-'            reduce using rule 20
	';'            reduce using rule 20
	'bool'         reduce using rule 20
	'char'         reduce using rule 20
	'dec'          reduce using rule 20
	'exit'         reduce using rule 20
	'false'        reduce using rule 20
	'from'         reduce using rule 20
	'fun'          reduce using rule 20
	'if'           reduce using rule 20
	'immutable'    reduce using rule 20
	'inc'          reduce using rule 20
	'int'          reduce using rule 20
	'not'          reduce using rule 20
	'print'        reduce using rule 20
	'return'       reduce using rule 20
	'skip'         reduce using rule 20
	'string'       reduce using rule 20
	'true'         reduce using rule 20
	'void'         reduce using rule 20
	'while'        reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	L_Ident        reduce using rule 20
	L_charac       reduce using rule 20
	L_integ        reduce using rule 20
	L_quoted       reduce using rule 20
	%eof           reduce using rule 20


State 135

	Stmt -> 'if' '(' Expr ')' Block 'else' . Block      (rule 19)

	'{'            shift, and enter state 41

	Block          goto state 140

State 136

	Type -> 'fun' '[' ListArgType '->' Type ']' .       (rule 33)

	','            reduce using rule 33
	'->'           reduce using rule 33
	']'            reduce using rule 33
	'{'            reduce using rule 33
	L_Ident        reduce using rule 33


State 137

	Stmt -> 'from' Ident '=' Expr 'to' Expr . 'do' Stmt    (rule 21)

	'do'           shift, and enter state 139


State 138

	Expr6 -> '(' ListArg ')' '->' Type Block .          (rule 49)

	')'            reduce using rule 49
	'*'            reduce using rule 49
	'+'            reduce using rule 49
	','            reduce using rule 49
	'-'            reduce using rule 49
	'/'            reduce using rule 49
	';'            reduce using rule 49
	'<'            reduce using rule 49
	'<='           reduce using rule 49
	'>'            reduce using rule 49
	'>='           reduce using rule 49
	'and'          reduce using rule 49
	'do'           reduce using rule 49
	'is'           reduce using rule 49
	'mod'          reduce using rule 49
	'or'           reduce using rule 49
	'to'           reduce using rule 49


State 139

	Stmt -> 'from' Ident '=' Expr 'to' Expr 'do' . Stmt    (rule 21)

	'('            shift, and enter state 19
	'-'            shift, and enter state 20
	';'            shift, and enter state 21
	'bool'         shift, and enter state 22
	'char'         shift, and enter state 23
	'dec'          shift, and enter state 24
	'exit'         shift, and enter state 25
	'false'        shift, and enter state 26
	'from'         shift, and enter state 27
	'fun'          shift, and enter state 28
	'if'           shift, and enter state 29
	'immutable'    shift, and enter state 30
	'inc'          shift, and enter state 31
	'int'          shift, and enter state 32
	'not'          shift, and enter state 33
	'print'        shift, and enter state 34
	'return'       shift, and enter state 35
	'skip'         shift, and enter state 36
	'string'       shift, and enter state 37
	'true'         shift, and enter state 38
	'void'         shift, and enter state 39
	'while'        shift, and enter state 40
	'{'            shift, and enter state 41
	L_Ident        shift, and enter state 2
	L_charac       shift, and enter state 42
	L_integ        shift, and enter state 43
	L_quoted       shift, and enter state 44

	Ident          goto state 3
	Char           goto state 4
	Integer        goto state 5
	String         goto state 6
	Block          goto state 8
	Stmt           goto state 141
	Type           goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 18

State 140

	Stmt -> 'if' '(' Expr ')' Block 'else' Block .      (rule 19)

	'('            reduce using rule 19
	'-'            reduce using rule 19
	';'            reduce using rule 19
	'bool'         reduce using rule 19
	'char'         reduce using rule 19
	'dec'          reduce using rule 19
	'exit'         reduce using rule 19
	'false'        reduce using rule 19
	'from'         reduce using rule 19
	'fun'          reduce using rule 19
	'if'           reduce using rule 19
	'immutable'    reduce using rule 19
	'inc'          reduce using rule 19
	'int'          reduce using rule 19
	'not'          reduce using rule 19
	'print'        reduce using rule 19
	'return'       reduce using rule 19
	'skip'         reduce using rule 19
	'string'       reduce using rule 19
	'true'         reduce using rule 19
	'void'         reduce using rule 19
	'while'        reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	L_Ident        reduce using rule 19
	L_charac       reduce using rule 19
	L_integ        reduce using rule 19
	L_quoted       reduce using rule 19
	%eof           reduce using rule 19


State 141

	Stmt -> 'from' Ident '=' Expr 'to' Expr 'do' Stmt .    (rule 21)

	'('            reduce using rule 21
	'-'            reduce using rule 21
	';'            reduce using rule 21
	'bool'         reduce using rule 21
	'char'         reduce using rule 21
	'dec'          reduce using rule 21
	'exit'         reduce using rule 21
	'false'        reduce using rule 21
	'from'         reduce using rule 21
	'fun'          reduce using rule 21
	'if'           reduce using rule 21
	'immutable'    reduce using rule 21
	'inc'          reduce using rule 21
	'int'          reduce using rule 21
	'not'          reduce using rule 21
	'print'        reduce using rule 21
	'return'       reduce using rule 21
	'skip'         reduce using rule 21
	'string'       reduce using rule 21
	'true'         reduce using rule 21
	'void'         reduce using rule 21
	'while'        reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	L_Ident        reduce using rule 21
	L_charac       reduce using rule 21
	L_integ        reduce using rule 21
	L_quoted       reduce using rule 21
	%eof           reduce using rule 21


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 79
Number of terminals: 49
Number of non-terminals: 26
Number of states: 142
