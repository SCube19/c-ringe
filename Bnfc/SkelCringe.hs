-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelCringe where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsCringe

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsCringe.Ident -> Result
transIdent x = case x of
  AbsCringe.Ident string -> failure x

transProgram :: Show a => AbsCringe.Program' a -> Result
transProgram x = case x of
  AbsCringe.Program _ stmts -> failure x

transBlock :: Show a => AbsCringe.Block' a -> Result
transBlock x = case x of
  AbsCringe.Block _ stmts -> failure x

transStmt :: Show a => AbsCringe.Stmt' a -> Result
transStmt x = case x of
  AbsCringe.Empty _ -> failure x
  AbsCringe.BStmt _ block -> failure x
  AbsCringe.Decl _ type_ item -> failure x
  AbsCringe.ConstDecl _ type_ item -> failure x
  AbsCringe.Ass _ ident expr -> failure x
  AbsCringe.Incr _ ident -> failure x
  AbsCringe.Decr _ ident -> failure x
  AbsCringe.Ret _ expr -> failure x
  AbsCringe.VRet _ -> failure x
  AbsCringe.Cond _ expr stmt -> failure x
  AbsCringe.CondElse _ expr block1 block2 -> failure x
  AbsCringe.While _ expr stmt -> failure x
  AbsCringe.For _ ident expr1 expr2 stmt -> failure x
  AbsCringe.Print _ expr -> failure x
  AbsCringe.PrintLn _ expr -> failure x
  AbsCringe.Break _ -> failure x
  AbsCringe.Continue _ -> failure x
  AbsCringe.SExp _ expr -> failure x

transItem :: Show a => AbsCringe.Item' a -> Result
transItem x = case x of
  AbsCringe.NoInit _ ident -> failure x
  AbsCringe.Init _ ident expr -> failure x

transType :: Show a => AbsCringe.Type' a -> Result
transType x = case x of
  AbsCringe.Int _ -> failure x
  AbsCringe.Char _ -> failure x
  AbsCringe.Str _ -> failure x
  AbsCringe.Bool _ -> failure x
  AbsCringe.Void _ -> failure x
  AbsCringe.Fun _ argtypes type_ -> failure x

transArgType :: Show a => AbsCringe.ArgType' a -> Result
transArgType x = case x of
  AbsCringe.Val _ type_ -> failure x
  AbsCringe.Ref _ type_ -> failure x

transArg :: Show a => AbsCringe.Arg' a -> Result
transArg x = case x of
  AbsCringe.Arg _ argtype ident -> failure x

transExpr :: Show a => AbsCringe.Expr' a -> Result
transExpr x = case x of
  AbsCringe.EVar _ ident -> failure x
  AbsCringe.ELitInt _ integer -> failure x
  AbsCringe.ELitChar _ char -> failure x
  AbsCringe.EString _ string -> failure x
  AbsCringe.ELitTrue _ -> failure x
  AbsCringe.ELitFalse _ -> failure x
  AbsCringe.ELambda _ args type_ block -> failure x
  AbsCringe.EApp _ ident exprs -> failure x
  AbsCringe.Neg _ expr -> failure x
  AbsCringe.Not _ expr -> failure x
  AbsCringe.EMul _ expr1 mulop expr2 -> failure x
  AbsCringe.EAdd _ expr1 addop expr2 -> failure x
  AbsCringe.ERel _ expr1 relop expr2 -> failure x
  AbsCringe.EAnd _ expr1 expr2 -> failure x
  AbsCringe.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => AbsCringe.AddOp' a -> Result
transAddOp x = case x of
  AbsCringe.Plus _ -> failure x
  AbsCringe.Minus _ -> failure x

transMulOp :: Show a => AbsCringe.MulOp' a -> Result
transMulOp x = case x of
  AbsCringe.Times _ -> failure x
  AbsCringe.Div _ -> failure x
  AbsCringe.Mod _ -> failure x

transRelOp :: Show a => AbsCringe.RelOp' a -> Result
transRelOp x = case x of
  AbsCringe.LTH _ -> failure x
  AbsCringe.LE _ -> failure x
  AbsCringe.GTH _ -> failure x
  AbsCringe.GE _ -> failure x
  AbsCringe.EQU _ -> failure x
  AbsCringe.NE _ -> failure x
